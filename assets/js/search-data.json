{
  
    
        "post0": {
            "title": "Vocab WITH Examples!!",
            "content": ". Algorithm . The study of encoding and decoding signals to ensure their security. Coding is done using a key that should ideally only be known by the message&#39;s sender and intended receiver. . An algorithm is essentially just a conceptually generalized solution to a problem that may be later used in the actual world, such as a computer program. Interface for Application Programs An API is a collection of procedures, protocols, and instruments used to create software applications. The interaction between software components is defined by an API. The programming of graphical user interface (GUI) components also uses APIs. . def get_even_numbers(numbers: List[int]) -&gt; List[int]: even_numbers = [] for number in numbers: if number % 2 == 0: even_numbers.append(number) return even_numbers . . Binary . The study of encoding and decoding signals to ensure their security. Coding is done using a key that should ideally only be known by the message&#39;s sender and intended receiver. . One of the lowest levels of abstraction employs a base-2 numeric system that only uses combinations of the digits zero and one. Because they only use zeros and ones for data storage and computation, computers only work in binary. In boolean logic, a single binary digit can stand in for True (1) or False (0), but many binary digits can be combined to store enormous amounts of data and carry out intricate operations. Computers convert between binary and the real data you need, such numbers and . def decimal_to_binary(n: int) -&gt; str: binary_digits = [] while n &gt; 0: binary_digits.append(n % 2) n = n // 2 return &quot;&quot;.join(str(d) for d in binary_digits[::-1]) . . Binary Search . The study of encoding and decoding signals to ensure their security. Coding is done using a key that should ideally only be known by the message&#39;s sender and intended receiver. . Only applicable when the list is sorted, this search technique finds the location of a target value within a sorted array by continually halving the search interval. The amount of effort needed to discover an object rises considerably more slowly with Binary Search than with Sequential Search due to its divide-and-conquer strategy. With this logarithmic tendency, in reality. . def binary_search(arr: List[int], target: int) -&gt; int: low = 0 high = len(arr) - 1 while low &lt;= high: mid = (low + high) // 2 if target &lt; arr[mid]: high = mid - 1 # Narrow the search range to the lower half elif target &gt; arr[mid]: low = mid + 1 # Narrow the search range to the upper half else: return mid # Return the index of the target element return -1 . . Boolean Function . of libraries . the study of encoding and decoding signals to ensure their security. Coding is done using a key that should ideally only be known by the message&#39;s sender and intended receiver. . any function that is based on AND, OR, and NOT and whose constituent parts fall under the purview of boolean algebra. a function that takes values from a two-element set (often 0 and 1) for both its inputs and the function itself. Processing Unit Central The computer&#39;s brain, also known as the processor, is where the majority of computations are performed. Contains the hardware required to understand and carry out software instructions. . def bool_func(x: bool, y: bool) -&gt; bool: if x and not y: return True else: return False . . Computational Artifact . Something created by a human using a computer and can be, but is not limited to, a program, an image, an audio, a video, a presentation, or web page file, . . . Cryptography . The study of encoding and decoding signals to ensure their security. Coding is done using a key that should ideally only be known by the message&#39;s sender and intended receiver. . Numbers in Floating Points Numbers with floating decimal points are known as floating point numbers, as the name suggests. The figures 5.5, 0.001, and -2,345.6789 are some examples. Integers are numbers that have no decimal places. Real numbers with embedded fractions are recognized as floating point numbers by computers. . print(&#39;Plaintext: THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39;) print(&#39;Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD&#39;) . Plaintext: THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD . . Hexadecimal . Integers can be positive, negative, or zero and are full numbers, not fractions. A datum of integral data type, or data type that represents a limited subset of the mathematical integers, is what is known as an integer in computer science. Different widths and the ability to include negative values are both options for integral data types. . print(&#39;FF6699&#39;) . FF6699 . . Integers . An integer is a whole number that can be positive, negative, or zero and is not a fraction. A data type that represents a limited subset of the mathematical numbers is known as an integer in computer science. Different widths and the presence of negative values are also possible for integral data types. . x = 10 print(x) # prints 10 print(type(x)) # prints &lt;class &#39;int&#39;&gt; # Perform arithmetic operations with integers y = x + 5 print(y) # prints 15 z = x * y print(z) # prints 150 . 10 &lt;class &#39;int&#39;&gt; 15 150 . . Iterations . Iteration is the repetition of part of an algorithm until a condition is met or for a specified number of times. This is often called a ‘loop’. Recursive functions repeatedly execute themselves as part of their operation. Upon completing all instructions and resetting to the first one iteration has been completed. . numbers = [1, 2, 3, 4, 5] for number in numbers: print(number) words = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;] for word in words: print(word) . 1 2 3 4 5 apple banana cherry . . Libraries . A library in computer science is a collection of non-volatile data that a program may often access to create new software. Due to the fact that you do not have to manually link routines to every application that utilizes them, libraries are particularly helpful for storing frequently used functions. When the linker cannot find a procedure elsewhere, it automatically searches libraries for it. Data, documentation, message templates, pre-written code, classes, and values are examples of resources that may be found in libraries. . import math x = math.sqrt(9) print(x) # prints 3.0 y = math.sin(math.pi / 2) print(y) # prints 1.0 import random data = [1, 2, 3, 4, 5] random.choice(data) . 3.0 1.0 . 4 . . Linear/Sequential Search . A method that progressively examines each element in the list until the target element is discovered or every element has been examined. can be applied to any list type. performs linearly. . def linear_search(data, target): for i in range(len(data)): if data[i] == target: return i return -1 # Test the search function data = [1, 2, 3, 4, 5] target = 3 index = linear_search(data, target) if index == -1: print(f&quot;{target} not found in data&quot;) else: print(f&quot;{target} found at index {index}&quot;) . 3 found at index 2 . . Lossless Data Compression . When a file is compressed without any loss of quality, all of the original data is still present when the file is decompress. The information has been fully recovered. This method is typically used for text or spreadsheet files where the loss of words or financial information might be problematic. A format for images that offers lossless compression is PNG. . compressed_data = zlib.compress(data) decompressed_data = zlib.decompress(compressed_data) assert data == decompressed_data . . Lossy compression . Reduces a file by permanently removing certain data, particularly superfluous data. Upon file uncompression, just a portion of the original data remains (although the user may not notice it). Lossy compression is typically employed for video and sound since most users won&#39;t notice a certain degree of information loss. The lossy compression offered by JPEG. . from PIL import Image image = Image.open(&quot;image.jpg&quot;) image_data = image.getdata() quality = 50 compressed_image = Image.new(&quot;RGB&quot;, image.size) compressed_image.putdata(image_data) compressed_image.save(&quot;image_compressed.jpg&quot;, &quot;JPEG&quot;, quality=quality) . . Metadata . Information about other information. Basic information about data is summarized in metadata, which can facilitate identifying and interacting with specific instances of data. It offers details on an item&#39;s content, such as the size and resolution of the images. . &lt;head&gt; &lt;title&gt;Akshat&lt;/title&gt; &lt;meta name=&quot;description&quot; content=&quot;hey&quot;&gt; &lt;meta name=&quot;keywords&quot; content=&quot;hey&quot;&gt; &lt;meta name=&quot;author&quot; content=&quot;Akshat Parikh&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;/head&gt; . . Pseudocode . A thorough yet understandable specification of what an algorithm or computer program must accomplish. It might also be used to define a working principle. Instead of being represented in a programming language made for humans, it is done so in a professionally stylized natural language. Normal programming practices continue. . maxValue = 0 FOR each number in list: IF number &gt; maxValue: maxValue = number OUTPUT maxValue . . Sequencing . The process of carrying out each step/action in a particular algorithm in the exact sequence that is specified. . def greet(name): print(&quot;Hello, &quot; + name + &quot;!&quot;) x = 5 print(x) greet(&quot;Mr.Mort&quot;) print(&quot;Goodbye!&quot;) . 5 Hello, Mr.Mort! Goodbye! .",
            "url": "https://akshat122805.github.io/fastpages/2022/12/15/VOCABULARY.html",
            "relUrl": "/2022/12/15/VOCABULARY.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit (temperature): celsius = temperature - 32 celsius = celsius * 5/9 return celsius outsideTemp = input(&quot;What is the temperature Outside?&quot;) print(convertFahrenheit(int(outsideTemp))) def convertFahrenheit (temperature): celsius = temperature - 32 celsius = celsius * 5/9 return celsius print(&quot;What is the temperature outside?&quot;) outsideTemp = input() . 25.0 What is the temperature outside? . Developing Procedures . Slide 8: . Picking a ___ name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . currentPoints = int(input(&quot;How many points did you earn on the retake? (Positive integer&quot;)) quizGrade = int(input(&quot;How many points did you earn previously for the quiz? (Positive integer)&quot;)) quizTotal = int(input(&quot;How many points was the quiz out of? (Positive integer&quot;)) def quizReplace(currentPoints, quizGrade, quizTotal): quizGrade = (quizGrade/quizTotal) * 100 currentGrade = currentPoints / quizTotal currentGrade = currentGrade * 100 if (currentGrade &gt; quizGrade): quizGrade = currentGrade return quizGrade print(&quot;Your new grade on the quiz is &quot; + str(int(quizReplace(currentPoints, quizGrade, quizTotal))) + &quot;%&quot;) # inputted: currentPoints = 30 # quizGrade = 25 # quizTotal = 30 . Your new grade on the quiz is 100% . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a pre-written procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . def get_teacher_feedback(teacher_name, assignment_name): feedback = &quot;Your assignment was well-written and thoroughly researched. Great job!&quot; return feedback print(get_teacher_feedback(&quot;Ms. Smith&quot;, &quot;History project&quot;)) . Your assignment was well-written and thoroughly researched. Great job! . In this example, the get_teacher_feedback() procedure takes in two arguments: the teacher&#39;s name and the name of the assignment. It then retrieves feedback for that assignment from the teacher and returns it. . To call the procedure, we simply call the get_teacher_feedback() function and pass in the appropriate arguments. In this case, we are calling the function with the teacher&#39;s name as &quot;Ms. Smith&quot; and the assignment name as &quot;History project&quot;. When we run the code, the feedback from Ms. Smith for the History project will be printed to the screen. . another example!!!! . def calculate_grade(homework_grades, quiz_grades, test_grades): homework_grade = sum(homework_grades) / len(homework_grades) quiz_grade = sum(quiz_grades) / len(quiz_grades) test_grade = sum(test_grades) / len(test_grades) final_grade = 0.3 * homework_grade + 0.3 * quiz_grade + 0.4 * test_grade return final_grade print(calculate_grade([90, 95, 100], [85, 90, 95], [80, 85, 90])) . 89.5 . To call the procedure, we simply call the calculate_grade() function and pass in the appropriate arguments. In this case, we are calling the function with three lists of grades for the homework, quiz, and test categories. When we run the code, the final grade for the student will be printed to the screen. .",
            "url": "https://akshat122805.github.io/fastpages/3.12-3.13/2022/12/15/Lesson5.html",
            "relUrl": "/3.12-3.13/2022/12/15/Lesson5.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "3.8-3.10 Teaching Plan - Booleans and Conditionals",
            "content": "Lists and Iterations . Lists . Sequence of variables | used rto store multiple items in a variable | Ordered and flexible | . sports = [&quot;football&quot;, &quot;hockey&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;golf&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;golf&#39;, &#39;basketball&#39;] . Iterations . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. There&#39;s a lot of types of iteration though, what to use? How do we apply iteration to lists? . Some methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension . Lists, tuples, dictionaries, and sets are iterable objects. They are the &#39;containers&#39; that store the data to iterate. . Each of these containers are able to iterate with the iter() command. . There are 2 types of iteration:definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met. . When an object is iterable it can be used in an iteration. . When passed through the function iter() it returns an iterator. . Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. . a = [&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;] itr = iter(a) print(next(itr)) print(next(itr)) print(next(itr)) . alpha bravo charlie . Loops . Well, above is basically just printing them again, so how do we takes these iterators into something we can make use for? Loops take essentially what we did above and automates it, here are some examples. . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # using a for loop for i in list: #for item in the list, print the item print(i) . Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Taking the length of the list lengthList = len(list) # Iteration using the amount of items in the list for i in range(lengthList): print(list[i]) . Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Once again, taking the length of the list lengthList = len(list) # Setting the variable we are going to use as 0 i=0 # Iteration using the while loop # Argument saying WHILE a certain variable is a certain condition, the code should run while i &lt; lengthList: print(list[i]) i += 1 . Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu . Range Functions . SAVES MORE TIME! . x = range(5) for n in x: print(n) . 0 1 2 3 4 . 2D Iterations . A 2D array is simply just a list of lists. The example below is technically correct but conventially 2D arrays are written like below. This is because 2D arrays are meant to be read in 2 dimensions (hence the name). Writing them like below makes them easier to visualize and understand. . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Conventially 2D arrays are written like below. This is because 2D arrays are meant to be read in 2 dimensions (hence the name). Writing them like below makes them easier to visualize and understand. . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . def print_matrix1(matrix): for i in range(len(matrix)): for j in range(len(matrix[i])): print(matrix[i][j], end=&quot; &quot;) print() . Else, elif, and break For when 1 statement isn&#39;t enough . Else:when the condition does not meet, do statement()- Elif: when the condition does not meet, but meets another condition, do statement() Break: stop the loop HW Iteration Use the list below to turn the first letter of any word (using input()) into its respective NATO phonetic alphabet word . Ex: . list -&gt; . lima india sierra tango . check TABLe | . Lists are just one of four collection data types in Python Tuple: collection that is ordered, unchangeable, allows duplicates Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates . Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) Elements: the values in the list assigned to an index . print(&quot;Raw matrix (list of lists): &quot;) print(keypad) print(&quot;Matrix printed using nested for loop iteration:&quot;) print_matrix1(keypad) print() . Raw matrix (list of lists): [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&#39; &#39;, 0, &#39; &#39;]] Matrix printed using nested for loop iteration: 1 2 3 4 5 6 7 8 9 0 . def print_matrix2(matrix): for row in matrix: for col in row: print(col, end=&quot; &quot;) print() keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] print_matrix2(keypad) . 1 2 3 4 5 6 7 8 9 0 . apples and bananas example . fruit = [&quot;apples&quot;, &quot;bananas&quot;, &quot;grapes&quot;] print(fruit) print(*fruit) . [&#39;apples&#39;, &#39;bananas&#39;, &#39;grapes&#39;] apples bananas grapes . def print_matrix3(matrix): for row in matrix: print(*row) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . another way of making keypad . def print_matrix4(matrix): matrix_iter = iter(matrix) for i in range(len(matrix)): inner_matrix_iter = iter(next(matrix_iter)) for j in matrix[i]: print(str(next(inner_matrix_iter)), end=&quot; &quot;) print() print_matrix4(keypad) . 1 2 3 4 5 6 7 8 9 0 . keyboard . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] output = &quot;DECEMBER16&quot; for char in output: #each item in the output is a character for row in keyboard: #each item in the keyboard is a row for key in row: #each item in the row is a key if str(key) == char: #if the key matches each character in output print(key, end=&#39;&#39;) break #ends the loop. back to first loop . DECEMBER16 . challenge . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] output = &quot;DECEMBER16&quot; for row in keyboard: for key in row: if str(key) in output: print(key, end=&#39;&#39;) else: print(&quot; &quot;, end=&#39;&#39;) print(&quot; n&quot;) . 1 6 ER D C B M .",
            "url": "https://akshat122805.github.io/fastpages/3.8-3.10/2022/12/15/Lesson4.html",
            "relUrl": "/3.8-3.10/2022/12/15/Lesson4.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 3 Sections 17-18",
            "content": "Do Now!!! . Set up your notebook by either wgetting the lesson or tracking it by your own (We would recommend wgetting since there are some fill in the blanks!) | wget here: https://raw.githubusercontent.com/mmaxwu/Tri2-GroupFastpages/master/_notebooks/2022-12-dd-lesson.ipynb | . 3.17: Algorithm Efficiency . Purpose: . The purpose of this lesson is to help students understand how to make an efficient program and optimize it and understand its importance to the CSP curriculum. . What is Algorithmic Efficiency? . The ability of an algorithm to solve a problem in an efficient way An efficient algorithm solves a problem quickly and with a minimum of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm. | Another way is through space complexity. | . | . Traveling Merchant Problem Hacks: . What did you and your team discuss? (record below) . An heuristic solution is an approach to a problem that produces a solution that isn&#39;t necessarily optimal but can be used when normal methods take forever | . Describe the method used to solve the traveling merchant problem. (record below) . One way is to compute an efficient algorithm that find the shortest distance for all cities by recording distance from each city and computing the quickest way. Finding the shortest distance is the best method. . 3.18: Undecidable Problems . Purpose: . The purpose of this lesson is to introduce students to the concept of undecidable problems in computer science and to explain why these problems are important. . Key vocabulary: . Decision problem | Decidable problem | Undecidable problem | . Decision Problem . A decision problem is a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs:&quot;yes&quot; or &quot;no&quot;. There are two types of decision problems that Collegeboard goes over: . Decidable Problems | Undecidable Problems | . A decidable is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. . An undecidable problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. . Decidable Problems . A decidable problem is an algorithm that can always have an output of yes or no given any input. It is always correct. . Example of a Decidable Problem . The procedure below tests to see if a number is divisible by 13. If it is, it returns true. If it isn&#39;t, it returns false. . def divideThirteen(number): if number % 13 == 0: return True else: return False print(divideThirteen(26)) print(divideThirteen(30)) . True False . Undecidable Problems . An Example of a Forever Running Code . The code keeps adding 1 to the variable number until number is no longer an integer(This is not the python data type &quot;integer&quot;, it&#39;s the integer in number theory). However, there is no end to this code, making the computer run forever. There is no halt to the code. . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . KeyboardInterrupt Traceback (most recent call last) /home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-14-Lesson8.ipynb Cell 11 in &lt;cell line: 10&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-14-Lesson8.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; while i == 0: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-14-Lesson8.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; number += 1 &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-14-Lesson8.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; if integerTest(number) == False: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-14-Lesson8.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; i +=1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-14-Lesson8.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; print(&#34;Done&#34;) KeyboardInterrupt: . The Halting Problem . The halting problem is an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. . There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. . Halting Problem Example: . In order to understand this, suppose that an algorithm was able to analyze whether a code halts or not. Let&#39;s call this algorithm HaltChecker. | HaltChecker analyzes the program,program P, and its input,input I. If program P halts with input I, HaltChecker returns an output of &quot;halts&quot;. If program P doesn&#39;t halt(runs forever) with input I, HaltChecker returns an output of &quot;never&quot;. For example, in the code where it tests if variable number, the code runs forever, so HaltChecker returns an output of never. | Then, we add another algorithm called Reverser which reverses HaltChecker&#39;s output. So, if &quot;never&quot; is the output of HaltChecker, then the output of Reverser is halts. It&#39;s also the same the other way around: if HaltChecker has an output of &quot;halts&quot;, then Reverser has an output of never. | We combine these algorithms into one entire body of code. | Since Reverser is the algorithm at the end, hence giving the ultimate output, notice how it prints &quot;never&quot; when in fact there is an end(As proved by HaltChecker), and how it also prints &quot;halts&quot; when there is in fact is no end to the code(Also proved by HaltChecker). As a result, HaltChecker is inaccurate and this is an undecidable problem. | . This Diagram Sums up the Entire Process in the Bulleted List: . Credits of diagram and example to Khan Academy . FAQ . Q: If Reverser is causing the problem, why not remove it? | A: Removing Reverser will remove the problems, however, we are looking for ways which create the problem of not outputting a correct result. One example is enough to prove that it is an undecidable problem since it proves that the code is not completely accurate. | . Extra Things to Notice . Note that while a computer may take a long time to run a section of code, it does not mean that the computer is going to run forever. | Humans are able to solve some undecidable problems. The entire Halting Problem example was to prove that computers cannot solve undecidable problems. | . Hacks . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem. . . 3.17 Homework . Your homework for Algorithmic Efficiency is pretty simple. . Use the 1st code below and graph it (Desmos, TI Inpire Cas, e.t.c), change the x value only! | Label the number of loops done as x and the time (microseconds) to find the index as y | Connect the points | Do the same thing with the 2nd code | Compare the two graphs and explain which one of the two is more efficient and why (min. 2 sentences) | Insert images of the graph either in your blog or on review ticket | Hacks . QUILLBOT THIS One situation in which a computer may run into an undecidable problem is when trying to determine if a given program will run forever or eventually halt. This is known as the halting problem, and it is considered undecidable in python (and any other general-purpose programming language) because it is impossible to determine, using a finite number of steps, whether a program will halt or run forever. . To understand why the halting problem is undecidable, consider a simple program that takes a single input, which is the name of another program, and attempts to determine whether that program will halt or run forever when given the same input. If the program being examined halts, then our original program will also halt. However, if the program being examined runs forever, our original program will also run forever, because it will be stuck in an infinite loop trying to determine whether the other program will halt. This means that our original program cannot determine, using a finite number of steps, whether the other program will halt or run forever. . In conclusion, the halting problem is undecidable in python because it is impossible for a program to determine, using a finite number of steps, whether another program will halt or run forever. This is a fundamental limitation of all general-purpose programming languages, and it is one of the reasons why some problems are considered &quot;undecidable&quot; in these languages. . import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 5000 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 149 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . 3.18 Homework: . Use the Jupyter notebook to write an algorithm that solves a decidable problem. You can use math or whatever else you would like to do. | Write code to get the computer to run forever. Check this example if you need help, but please come up with your own idea. | Homeworks, hacks, and classwork(filled in blanks) for both 3.17 and 3.18 are due on Thursday at 9:00 pm. -0.1 points for each day late. . Homework part 1 . def is_prime(n): is_prime = True if n &lt;= 1: is_prime = False return is_prime for i in range(2, int(n ** 0.5) + 1): if n % i == 0: is_prime = False break return is_prime . Homework (part 2) . while True: # this works:) pass # not running this for a reason .",
            "url": "https://akshat122805.github.io/fastpages/lesson",
            "relUrl": "/lesson",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Guest Speakers | Kathyleen Beveridge & Kris Porter",
            "content": "Notes . Kathyleen Beveridge is a high-tech professional at Qualcomm, she earned her bachelor&#39;s degree at Santa Clara, where she pursued finance and became an investment banker. She soon did not like the work that she was doing with mergers and acquisitions and so she earned her masters degree at USC. Kathyleen’s favorite poet is Maya Angelou, she looks up to her as a role model. Kathyleen worked at HP as well. High-tech influenced Kathyleen because it had a macro/global impact for the services she was developing with her colleagues (for example, every day 1 billion people benefited from Qualcomm). Katyleen worked at Qualcomm and eventually became director of sales operations, she worked at Qualcomm for 14 years. Katyleen now works at Thermo Scientific Fisher, which has 100,000 employees and billions of dollars in revenue. Thermo Fisher Scientific Inc. is an American supplier of scientific instrumentation, reagents and consumables, and software services. . Kathyleen is the senior director of marketing and global commerce at Thermo Fisher Scientific, her job is to attract clients and grow the company overall in terms of business and sales. Kathyleen speaks about the voice of sales and how anyone can develop a concept and build it in a way where it can impact the world in a different way. . Kris Porter is a software engineer who specializes in DevOps and infrastructure engineering. Kris enrolled at UCLA for electrical engineering for a Bachelor&#39;s degree. Kris didn’t know anything about coding and even failed his CS class in his second semester at UCLA, he ended up retaking and soon would go on to like computer science. Kris graduated when the stock market crashed in 2008 so it was really hard to find a job. Kris did his masters degree at CSU Los Angeles and took his first job as a systems engineer at Griffith Park Media. He took on another job at NBC in which he was responsible for the operation and maintenance of production servers and edit stations. Kris joined a startup at LocationSmart in which he was a DevOps engineer where he was responsible for mostly engineering duties and operations. Mr. Mort then hired Kris and he worked at Qualcomm as a senior software engineer where he expertised on several different concepts such as user experience. Kris worked at Twitter for 2 years. One of Kris’s projects was network info mechanical systems which used robotics and AI to create a cool sensor reading. Kris also learned Linux. . Kris learned about python, data structures, machine learning and deep learning, CCNA, and Twitter University. Some other projects Kris worked on was an analytics infrastructure protocol. Some of his Twitter projects include building a new data center and working on GraphQL.Kris is now pursuing a web3 infrastructure startup which leads him into a new direction in his career. . I also learned about how interviewing is the hardest part in the tech world, we often need to present ourselves in a manner that can help us get a good job. I learned about agile methodology and also how business and technology often interconnect. I hope too use what I learned from this lesson to help me grow my career and gain insight on what I can do in the future! .",
            "url": "https://akshat122805.github.io/fastpages/markdown/2022/12/13/ec.html",
            "relUrl": "/markdown/2022/12/13/ec.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "3.16 Lesson",
            "content": "First Order of Business: Get your notebook . Open a terminal in vscode, run command: cd _notebooks, type &#39;wget&#39; and paste this link into said terminal and run it . | Take notes wherever you please, but you will be graded on participating . | . So, what is a simulation anyway? . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations . | These can be used for games like dice rolling, spinners, etc . | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world . | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life . | . Big Question . Which of the following simulations could be the LEAST useful? . | A retailer trying to identify which products sold the most . | A restaurant determining the efficiency of robots | An insurance company studying the rain impact of cars | A sports bike company studying design changes to their new bike design | . If you guessed a bike company, you&#39;re wrong, because the retail simulation was the right answer. Simulating robots in food service, sudying rain impact on vehicles, and new bike design can contribute a lot more to society in comparison to seeing what products sell more than others. | . Next Big Question . If you were making a simulation for making a new train station, which of the following would be true about this simulation? . It could reveal potential problems/safety issues before construction starts | It cannot be used to test the train station in different weather | Simulation will add high costs to projects | Simulation is not needed because this train station already exists | . Potential Saftey was the right answer, because you need somewhere to test the safety and ethicness of what you&#39;re about to do before you start building it. Otherwise, let&#39;s just say you&#39;ll have a special plaque for FBI&#39;s Most Wanted | . Simulation 1: . Both programs below do the same thing. Given a height and a weight, they calculate how long it will take for a object to fall to the ground in a vacuum subjected to normal Earth levels of gravity. . However, the second one is a simulation. It calculates the distance the object has fallen every 0.1 seconds. This is useful for if you wanted a visual representation of a falling object, which pure math can&#39;t do as smoothly. . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) . It will take 2.962348764761103 seconds for an object that weighs 167 pounds to fall 43.0 meters in a vacuum . t = 0 g = 0 d = 0 false = True while false: t = t + 0.1 d = 9.8 / 2 * (t**2) if d &gt;= height: false = False #print(d) # if you want to print the distance every time it calculates it. Too long to output to a terminal, but this could be useful to display graphically. #print(t) print(t) print(d) . 3.0000000000000013 44.10000000000004 . Simulation 2: . This simulation is made in order to simulate movement on a 2d plane vs a 3d plane. . | How it works: we have multiple variables, if statements and equations under a while command in order to randomy generate steps on a 2d plane. Once it reaches the set destination, it will say that the man made it home after x amount of steps. . | For the 3D plane, it takes a lot longer due to how big and open the 3d environment is, so there are more if statements in the 3d plane . | . (explain further) . import random x = 0 y = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): step = random.randrange(4) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 turn = turn + 1 if x == 0 and y == 0: nights = nights + 1 print(&quot;The Man Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y != 0: print(&quot;(&quot;, x,y, &quot;)&quot;) if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average, &quot;Ones that when&#39;t too long &quot;, stopped) . The Man Has Made It Home After 4 Turns ( 500 -18 ) ( 141 -905 ) ( -374 -1064 ) ( -738 -1990 ) ( -167 -945 ) ( -728 76 ) ( -78 20 ) ( 274 -394 ) ( 1414 1182 ) ( 2251 1797 ) Caped The Man Has Made It Home After 66 Turns The Man Has Made It Home After 45354 Turns The Man Has Made It Home After 8 Turns The Man Has Made It Home After 20 Turns The Man Has Made It Home After 6 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns ( -1639 -987 ) ( -1879 -1783 ) ( -1308 -1380 ) ( -2099 -1505 ) ( -3565 -763 ) ( -3524 -160 ) ( -3147 107 ) ( -2488 1632 ) ( -3522 1318 ) ( -3292 2326 ) Caped The Man Has Made It Home After 841340 Turns The Man Has Made It Home After 156 Turns The Man Has Made It Home After 12 Turns The Man Has Made It Home After 4 Turns ( -213 501 ) ( -503 673 ) ( -440 -850 ) ( -791 -595 ) ( -1583 -1153 ) ( -2750 -2260 ) ( -2452 -2456 ) ( -2191 -3571 ) ( -2458 -4410 ) ( -3021 -5621 ) Caped The Man Has Made It Home After 10 Turns The Man Has Made It Home After 4 Turns ( 383 -1433 ) ( -506 -416 ) ( 263 -1167 ) ( -263 -979 ) ( 331 189 ) ( 1494 772 ) ( 319 473 ) ( 169 677 ) ( -1257 -493 ) ( -1662 -828 ) Caped The Man Has Made It Home After 8 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 36906 Turns ( 775 215 ) ( -174 810 ) ( -1679 645 ) ( -1630 -46 ) ( -884 -1192 ) ( -669 -327 ) ( -30 -1432 ) ( 146 -724 ) ( -439 -1267 ) ( 500 -212 ) Caped The Man Has Made It Home After 2 Turns The Man Has Made It Home After 74690 Turns The Man Has Made It Home After 4 Turns The Man Has Made It Home After 8 Turns The Man Has Made It Home After 14 Turns The Man Has Made It Home After 2 Turns ( 786 -22 ) ( 474 1070 ) ( 1317 993 ) ( 913 -393 ) ( 1043 -427 ) ( 958 -118 ) ( 1637 -51 ) ( 1903 -1499 ) ( 1849 -2091 ) ( 1912 -2554 ) Caped The Man Has Made It Home After 8 Turns ( 659 435 ) ( 1725 1011 ) ( 1774 1066 ) ( 1534 1546 ) ( 1992 682 ) ( 2350 -206 ) ( 2253 -315 ) ( 2204 -512 ) ( 2741 -295 ) ( 4575 -367 ) Caped The Man Has Made It Home After 1932 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 430 Turns The Man Has Made It Home After 2080 Turns The Man Has Made It Home After 448 Turns The Man Has Made It Home After 23332 Turns The Man Has Made It Home After 5450 Turns The Man Has Made It Home After 22 Turns The Man Has Made It Home After 729852 Turns The Man Has Made It Home After 2 Turns ( -372 554 ) ( -1408 520 ) ( -1535 425 ) ( -713 1059 ) ( -645 -39 ) ( -698 90 ) ( -481 49 ) ( 273 -665 ) ( 42 -812 ) ( 234 -578 ) Caped The Man Has Made It Home After 16532 Turns The Man Has Made It Home After 4 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 39142 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 12 Turns The Man Has Made It Home After 29540 Turns The Man Has Made It Home After 4 Turns The Man Has Made It Home After 10 Turns The Man Has Made It Home After 6 Turns The Man Has Made It Home After 4 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 44 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 1242 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 188 Turns The Man Has Made It Home After 214 Turns The Man Has Made It Home After 6 Turns ( 46 -380 ) ( -499 -585 ) ( -371 -1509 ) ( 1298 -1756 ) ( 1484 -1572 ) ( 2301 -1011 ) ( 2473 -1833 ) ( 2744 -72 ) ( 3380 -134 ) ( 2229 -1445 ) Caped The Man Has Made It Home After 2 Turns The Man Has Made It Home After 1096 Turns The Man Has Made It Home After 24826 Turns The Man Has Made It Home After 2 Turns ( 381 -1099 ) ( 885 -939 ) ( -343 -2047 ) ( -164 -1608 ) ( -589 -429 ) ( -737 -253 ) ( -1210 370 ) ( -2297 407 ) ( -2190 436 ) ( -1946 824 ) Caped ( 1018 70 ) ( 414 322 ) ( 533 -405 ) ( -756 -1036 ) ( -1384 -2498 ) ( -1472 -3710 ) ( -752 -4740 ) ( -1347 -4221 ) ( -599 -3799 ) ( 180 -4224 ) Caped The Man Has Made It Home After 120 Turns The Man Has Made It Home After 82 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2452 Turns The Man Has Made It Home After 39848 Turns ( -84 298 ) ( 1150 1264 ) ( 451 1127 ) ( 1060 680 ) ( 729 -357 ) ( 693 -289 ) ( 868 -170 ) ( 1117 -521 ) ( 334 -962 ) ( 1079 -1917 ) Caped The Man Has Made It Home After 54 Turns ( 1184 226 ) ( 1811 903 ) ( 1698 -4 ) ( 2275 1255 ) ( 1620 1794 ) ( 1926 690 ) . KeyboardInterrupt Traceback (most recent call last) /home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb Cell 10 in &lt;cell line: 9&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; if step == 3: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; y = y-1 &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; turn = turn + 1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; if x == 0 and y == 0: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; nights = nights + 1 KeyboardInterrupt: . import random x = 0 y = 0 z = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): #rando movement step = random.randrange(6) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 if step == 4: z = z+1 if step == 5: z = z-1 #Turn counter turn = turn + 1 #Goal check if x == 0 and y == 0 and z == 0: nights = nights + 1 print(&quot;The Bird Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y + z != 0: print(&quot;(&quot;, x,y, &quot;) &quot;,&quot;| &quot;, z) #Too long Stoper if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 z = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average,&quot;Ones that when&#39;t too long &quot;, stopped) . ( 528 -66 ) | -6 ( 253 -661 ) | -772 ( -770 -894 ) | -800 ( -75 -505 ) | -1346 ( 1494 -931 ) | -1851 ( 2295 -23 ) | -2082 ( 2596 -885 ) | -3285 ( 2697 -4 ) | -4209 ( 2026 588 ) | -3356 ( 1881 681 ) | -3444 Caped ( -318 -898 ) | 336 ( 666 -2291 ) | -565 ( 473 -1061 ) | 668 ( 682 -1770 ) | -94 ( 341 -1240 ) | -415 ( 1336 -490 ) | -1028 ( 1684 98 ) | -126 ( 1814 4 ) | 794 ( 2230 103 ) | 379 ( 2725 344 ) | 443 Caped ( -728 185 ) | 47 ( -898 284 ) | 124 ( -347 425 ) | 82 ( -386 352 ) | 46 ( 292 735 ) | -443 ( 758 1497 ) | -1005 ( 1795 1335 ) | -1126 ( 1571 1942 ) | -531 ( 982 2371 ) | -667 ( 1944 2785 ) | -565 Caped ( 1130 -990 ) | -44 ( 274 -484 ) | -706 ( 105 -729 ) | -548 ( -554 -275 ) | -615 ( -1168 -582 ) | -572 ( -1253 -363 ) | -896 ( -1267 -90 ) | -1011 ( -1760 -239 ) | -1315 ( -977 -833 ) | -1888 ( -1331 -796 ) | -1905 Caped ( 22 -111 ) | 19 ( -1096 -15 ) | -313 ( -1440 358 ) | 1076 ( -2455 195 ) | 1016 ( -3012 722 ) | 1102 ( -2453 586 ) | 1691 ( -2075 -297 ) | 1870 ( -2819 -577 ) | 1574 ( -3241 -1215 ) | 1428 ( -3121 -1819 ) | 1544 Caped ( -199 -310 ) | 125 ( -104 -378 ) | 980 ( 310 -1175 ) | 859 ( 1430 -1852 ) | -202 ( 1143 -1744 ) | -335 ( 828 -1573 ) | -311 ( 680 -679 ) | -733 ( 338 -1318 ) | -1532 ( 181 -1003 ) | -1824 ( -724 -1068 ) | -1708 Caped ( 39 631 ) | -60 ( -1923 755 ) | -394 ( -2050 1763 ) | -787 ( -1770 2773 ) | -201 ( -1949 2984 ) | 527 ( -2318 2809 ) | -61 ( -2953 3906 ) | -89 ( -2622 2962 ) | 574 ( -2778 3837 ) | 447 ( -3072 4274 ) | 636 Caped The Bird Has Made It Home After 2 Turns ( 388 -18 ) | -562 ( -566 -380 ) | -248 ( -816 -532 ) | 794 ( -510 -462 ) | 414 ( -1520 -793 ) | -1057 ( -1369 -1809 ) | -1080 ( -1481 -1896 ) | -255 ( -914 -1281 ) | -385 ( -68 -1581 ) | -453 ( -1091 -1790 ) | 237 Caped The Bird Has Made It Home After 38 Turns ( -514 265 ) | 239 ( 19 26 ) | 283 ( -103 595 ) | 256 ( 559 -70 ) | -19 ( 262 -362 ) | -346 ( -787 -806 ) | -317 ( 273 -599 ) | -1078 ( 68 -342 ) | -1146 ( -533 -970 ) | -321 ( -457 -1001 ) | -392 Caped ( 1050 229 ) | -1823 ( -790 1194 ) | -2620 ( -668 2423 ) | -2189 ( -525 1141 ) | -2372 ( -410 648 ) | -2776 ( -64 594 ) | -2798 ( -948 305 ) | -3207 ( -878 43 ) | -3621 ( -592 180 ) | -3418 ( -43 171 ) | -3722 Caped The Bird Has Made It Home After 2 Turns ( -757 -647 ) | -306 ( -897 -792 ) | -1049 ( -475 -291 ) | -336 ( 146 1275 ) | -263 ( 245 472 ) | 319 ( 826 973 ) | -385 ( 2037 569 ) | 336 ( 2251 630 ) | -205 ( 3303 777 ) | -120 ( 2326 1863 ) | 573 Caped ( -16 -688 ) | 260 ( 416 -1002 ) | 242 ( 703 -1184 ) | 623 ( 463 -1307 ) | -168 ( 348 -654 ) | -524 ( 703 -601 ) | -1434 ( 738 -362 ) | -1220 ( 1375 -101 ) | -830 ( 1286 -841 ) | -421 ( 924 -605 ) | -1209 Caped The Bird Has Made It Home After 2 Turns ( -76 479 ) | -349 ( -1103 473 ) | -170 ( -1347 -144 ) | -183 . KeyboardInterrupt Traceback (most recent call last) /home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb Cell 11 in &lt;cell line: 10&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; step = random.randrange(6) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; if step == 0: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; x = x+1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; if step == 1: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/akshat1228/vscode/vscode/fastpages/_notebooks/2022-12-13-Lesson7.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; x = x-1 KeyboardInterrupt: . Simulations in the wild . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding . Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. . HW !!! . Create a simulation. It can be anything, just has to simulate something. . Some ideas: . Two objects colliding | Gravity on other planets | . AND . Find an example of a simulation in a software/game you use, screenshot, and explain how it is a simulation . HW!! . import random # Initial position x = 0 y = 0 # Initial velocity vx = random.uniform(-10, 10) # random value between -10 and 10 for the x-velocity vy = random.uniform(-10, 10) # random value between -10 and 10 for the y-velocity while True: # Update position x += vx y += vy # Check if ball has bounced off the edge of the screen if x &lt; 0 or x &gt; 100: vx *= -1 # reverse x-velocity if y &lt; 0 or y &gt; 100: vy *= -1 # reverse y-velocity # Output current position print(f&quot;Position: ({x}, {y})&quot;) . IF I RUN IT, IT WILL CRASH . Example of a simulation . This is NBA2k . . It&#39;s a simulation based from NBA2k23, you can modify your player with all sorts of factors like jump shot and speed. . I enjoy using it because I like basketball a lot. . This is a simulation because it shows the result for what the video gamer chooses and how they want their player to be. .",
            "url": "https://akshat122805.github.io/fastpages/lesson/2022/12/13/Lesson7.html",
            "relUrl": "/lesson/2022/12/13/Lesson7.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Student Teaching Lesson 3.14 & 3.15",
            "content": "wget https://raw.githubusercontent.com/aidenhuynh/CS_Swag/master/_notebooks/2022-11-30-randomvalues.ipynb . Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . The AP Exam Refrence Sheet itself is a library! . Hacks: . Research two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code. . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Activity: Walkthrough with NumPy . Install NumPy on VSCode: Open New Terminal In VSCode: pip3 install --upgrade pip pip install numpy . REMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12) . Example of using NumPy for arrays: . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . [[1 2 3] [4 5 6] [7 8 9]] . Example of using NumPy for derivatives: . import numpy as np # defining polynomial function var = np.poly1d([2, 1]) print(&quot;Polynomial function, f(x):&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Polynomial function, f(x): 2 x + 1 Derivative, f(x)&#39;= 2 When x=5 f(x)&#39;= 2 . Random Values . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | CollegeBoard uses RANDOM(A, B), to return an integer between integers A and B. RANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 | In Python, this would be random.randint(A, B), after importing Python&#39;s &quot;random&quot; library (import random) | JavaScript&#39;s works a little differently, with Math.random() returning a value between 0 and 1. To match Python and CollegeBoard, you could make a procedure like this | . | . | . CollegeBoard Example: What is the possible range of values for answ3 . Convert the following procedure to Python, then determine the range of outputs if n = 5. . PROCEDURE Dice(n) sum ← 0 REPEAT UNTIL n = 0 sum ← sum + RANDOM(1, 6) n ← n - 1 RETURN sum . import random # Fill in the blank def Dice(n): sum = 0 while n != 0: sum = sum + random.randint(1, 6) n = n - 1 return sum Dice(5) # Will output a range of 5 to 30 . 17 . Homework . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | Homework (part 1) . import random def sort_random_numbers(n: int) -&gt; tuple: # Generate n random numbers numbers = [random.randint(0, 100) for _ in range(n)] # Sort numbers into even and odd lists even_numbers = [x for x in numbers if x % 2 == 0] odd_numbers = [x for x in numbers if x % 2 == 1] return (even_numbers, odd_numbers) . even_numbers, odd_numbers = sort_random_numbers(10) print(even_numbers) # [2, 8, 12, 28, 60, 82] (example) print(odd_numbers) # [1, 3, 5, 7, 11, 13] (example) . [66, 72, 98, 76, 56, 94] [59, 43, 15, 35] . Homework (part 2) . import numpy as np #LMAOOO i just used coefficient, this work tho fr p = np.poly1d([2, 0, -6, 24, 0]) derivative = p.deriv() # Printing the final derivative boys print(derivative) . 3 8 x - 12 x + 24 . import numpy as np def calculate_derivative(x: float): poly = np.array([13, 0, 4, 0, 0]) derivative = np.polyder(poly) result = np.polyval(derivative, 9) return result print(calculate_derivative(9)) . 37980 . Homework (part 3) . import random dogs = [&#39;Blue 1&#39;, &#39;Blue 1&#39;, &#39;Blue 3&#39;, &#39;Blue 4&#39;, &#39;Blue 5&#39;, &#39;Blue 6&#39;, &#39;Blue 7&#39;, &#39;Blue 8&#39;, &#39;Blue 9&#39;, &#39;Blue 10&#39;] cats = [&#39;Red 1&#39;, &#39;Red 2&#39;, &#39;Red 3&#39;, &#39;Red 4&#39;, &#39;Red 5&#39;, &#39;Red 6&#39;, &#39;Red 7&#39;, &#39;Red 8&#39;, &#39;Red 9&#39;, &#39;Red 10&#39;] colors = [] for blue in dogs: colors.append((blue, random.randint(1, 20))) for red in cats: colors.append((red, random.randint(1, 20))) colors.sort(key=lambda x: x[1]) for color in colors: print(color[0]) . Blue 7 Blue 10 Blue 5 Blue 9 Blue 6 Red 10 Red 6 Red 8 Blue 1 Blue 4 Blue 8 Red 1 Red 9 Blue 1 Red 2 Blue 3 Red 7 Red 4 Red 5 Red 3 .",
            "url": "https://akshat122805.github.io/fastpages/lesson14-15",
            "relUrl": "/lesson14-15",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Teaching Plan - Booleans and Conditionals",
            "content": "Lesson Overview: 3.5 - Boolean Expressions . Here we will focus on: basics of Booleans | its relationship with binary | relational operators | Logical Operators | . | . What is a boolean? . A data type with two possible values: true or false | . Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | . A few ways these operators could be used... | . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | . With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . grade1 = 90 grade2 = 65 grade3 = 60 grade4 = 75 grade5 = 95 . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;,) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;,) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;,) . 1 &gt; 2 or 5 &lt; 12: 24 &gt; 8: 10 &gt; 20: . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . Can also be seen as if else statements or if else-blocks . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = num2 = sum = num1 + num2 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | . Basics of a nested conditional: | . Block Coding Visual of Nested Conditionals: . | Example Psuedocode of Nested Conditional Statements . | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time Decide which ones are false to skip and which ones are true to execute | . | . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | Hacks Assignments: . Conditionals: . Write a program that fits these conditions using nested conditionals: If the product is expired, print &quot;this product is no good&quot; | If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; | If the cost is 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; | If the cost is under 25 dollars, print &quot;this is a cheap product&quot; | . | . hours = 9 if hours &gt;= 8: experienced = True if hours &gt;= 10: salary = 150000 else: salary = 90000 else: experienced = False salary = 50000 print(&quot;Salary: $&quot; + str(salary)) print(&quot;Experienced:&quot;, experienced) . Salary: $90000 Experienced: True . expired = True cost = 60 if expired: print(&quot;this product is no good&quot;) else: if cost &gt; 50: print(&quot;this product is too expensive&quot;) elif 25 &lt; cost &lt; 50: print(&quot;this is a regular product&quot;) else: print(&quot;this is a cheap product&quot;) . this product is no good . Boolean/Conditionals: . Create a multiple choice quiz that ... uses Boolean expressions | uses Logical operators | uses Conditional statements | prompts quiz-taker with multiple options (only one can be right) | has at least 3 questions | . | Points will be awarded for creativity, intricacy, and how well Boolean/Binary concepts have been intertwined | . HOMEWORK . questions = { &quot;Who is the CEO of Google&quot;: [&quot;a. Larry Page&quot;, &quot;b. Larry Page&quot;, &quot;c. Elevate Musk&quot;, &quot;d. Steve Jobs&quot;], &quot;Which company has a fruit named after it?&quot;: [&quot;a. Nike&quot;, &quot;b. Lenovo&quot;, &quot;c. Apple&quot;, &quot;d. HP&quot;], &quot;What drink is the best&quot;: [&quot;a. Dr. Pepper&quot;, &quot;b. Arizona&quot;, &quot;c. Coke&quot;, &quot;d. Fantastic&quot;] } answers = { &quot;Which letter is farthest left on the keyboard?&quot;: &quot;a&quot;, &quot;Which company isn&#39;t a computer company?&quot;: &quot;c&quot;, &quot;What coding language do we mainly use in class?&quot;: &quot;b&quot; } score = 0 print(&quot;Ready for the computer quiz?&quot;) for q, a in questions.items(): print(q) print(*a) inp = input(&quot;Enter Your Answer&quot;) if(answers.get(q) == inp): score = score + 1 else: print(&quot;Try again&quot;) break print(&#39;Final Score:&#39;, score) . Ready for the computer quiz? Who is the CEO of Google a. Larry Page b. Larry Page c. Elevate Musk d. Steve Jobs Try again Final Score: 0 .",
            "url": "https://akshat122805.github.io/fastpages/notebook/student%20learning/2022/12/01/Lesson3.html",
            "relUrl": "/notebook/student%20learning/2022/12/01/Lesson3.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Mathematical Expressions and Strings",
            "content": "Algorithms . An Algorithm has three components: . Sequencing | Selection | Iteration | . Operations . Addition (+) | Subtraction (-) | Multiplication (*) | Division (/) | Modules (%) | . TEST BELOW: . num1 = 10 num2 = 20 num1 + num2 . 30 . Variables . Values stored in a variable can be numerical . | The result of an operation is stored in a variable. . | The result of the procedure is also stored in the variable. . | . Sequencing . Changes the overall outcome since the order changes. . Tracking Variables . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var 2 = var1 - var3 print(var1) print(var2) print(var3) . 9 7 2 . String . Collection of characters, can be any character. A string is a collection of characters. . len() finds the lenght of a string | lower () to convert to lowercase | concat() returns a string made up of the concatenated strings. Which is combining 2 more strings to make 1 string. | substring() | PSEUDOCODE STARTS AT 1 | CB uses brackets and says display. | . Problem Set [1-4] . Num1 = 50 Num2 = Num1 % 9 + 15 # 50/9 = 5 remainder --&gt; add 15 = 20 Num3 = Num2 / Num1 + ( Num2 * 2 ) # 20/50 + 40 = 40.4 Num4 = Num3 + Num1 / 5 - 10 # 40.4 + 50/5 - 10 = 40.4 Result = Num4 - Num2 # 40.4 - 20 print(Result) . 20.4 . Num1 = 10 Num2 = Num1 % 3 * 4 # 10/3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 print(Result) . 0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueC) . 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type2 = &quot;straight&quot; hair = type + color + length + type2 print(hair) . curlybrownshortstraight . Problem Set 2 . Noun = &quot;Mr.Mortensen&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;extremely&quot; Verb = &quot;is&quot; abrev = Noun[0:7] yoda = abrev + &quot; &quot; + Verb + &quot; &quot; + Adjective2 + &quot; &quot; + Adjective print(yoda) . Mr.Mort is extremely handsome . cookie = &quot;chocolate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 #MANUALLY CALCULATED len2 = len(cookie2) * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = &quot;the first Cookie has &quot; + str(len1) + &quot; and the second Cookie has &quot; + str(len2) print(votes) . the first Cookie has 4.5 and the second Cookie has 225 .",
            "url": "https://akshat122805.github.io/fastpages/3.3-3.4/2022/11/29/Lesson2.html",
            "relUrl": "/3.3-3.4/2022/11/29/Lesson2.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Notes",
            "content": "Variables, Assignments, Data Abstraction . Notes . A variable is an abstraction that can hold inside a program and hold the value. . Contains three parts: . Name | Value | Type | . Name variables are short and not as specific. Do not make your code for variables too complicated because it can become messy. However, do not make your variables too vague. . Types of data: . Integer | Text/string | Boolean | . Strings consist of a key word, the second variables would be considered as integers as it would display a number. The third variable would be a boolean because it shows if anything is true or false. . A list of data can also be stored in variables. This is useful as it can print/retrieve specific values n the list without creating lots of variables. . Assignments . Operators that allow the program to change the value represented by a variable. . Some operators: . = (assigns both right and left) (a=b) | += (a+b=ab) | -= (a-b=a-b) | and so on | . The value stored in a variable will be the most recent value assigned. . Changing Values: Change any value, but the most recent value will be the output. . Data Abstraction . Data abstraction is a method used in coding to represent data in useful forms in applicable scenarios. . Data abstraction has tools likes variables and lists which are very important. . Lists and Strings . A list is an ordered sequence of elements, an element is a specific value in that list to a unique index. An index is a reference to the elements in the string. . A string is a ordered sequence of characters. . Example of a list: EXAMPLE - WE USE COLORS: . colorsList=[&quot;pink&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue, &quot;orange&quot;, &quot;purple&quot;] . print(colorsList) . ^ Now it will print the colors and the list you defined along with the specific colors, which are the elements. . NOTE: Index always starts at ONE on AP Exam . Managing Complexity . Makes code more clear | Updates data easily | . There is only one other way for interchanging data between lists, and that is to completely overwrite previous data in the list. . Lesson Activities . colorsList=[&quot;pink&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;orange&quot;] print(colorsList) . [&#39;pink&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;orange&#39;] . team1=&quot;USA&quot; team2=&quot;England&quot; team3=&quot;France&quot; team4=&quot;Italy&quot; team5=&quot;Portugal&quot; team6=&quot;Argentina&quot; team7 = &quot;Germany&quot; team8 = &quot;Japan&quot; print(team1) print(team2) print(team3) print(team4) print(team5) print(team6) print(team7) print(team8) . USA England France Italy Portugal Argentina Germany Japan . colorList=[&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] print(str(colorList)) . [&#39;green&#39;, &#39;red&#39;, &#39;pink&#39;, &#39;purple&#39;, &#39;blue&#39;, &#39;brown&#39;] . HOMEWORK . import getpass, sys questions = 7 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &#39;!&#39;) print(&quot; t&quot;, &quot;You will be asked &quot; + str(questions) + &quot; questions on cars.&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) rsp = input() if rsp == answer : print(&quot; t&quot;, rsp + &quot; is correct!&quot;) global correct correct += 1 else: print (&quot; t&quot;, rsp + &quot; is incorrect!&quot;) return rsp Question_1 = question_and_answer(&quot;Whats the most expensive car in the world?&quot;, &quot;Mercedes Benz 300 SLR - $142,000,000&quot;) Question_2 = question_and_answer(&quot;Which company owns Rolls Royce?&quot;, &quot;BMW&quot;) Question_3 = question_and_answer(&quot;What is the biggest electric car company?&quot;, &quot;Tesla&quot;) Question_4 = question_and_answer(&quot;What company owns Jaguar?&quot;, &quot;TATA Motors&quot;) Question_5 = question_and_answer(&quot;Whose the best F1 Racer?&quot;, &quot;Max Verstappen&quot;) Question_6 = question_and_answer(&quot;Who is the F1 G.O.A.T?&quot;, &quot;Lewis Hamilton&quot;) Question_7 = question_and_answer(&quot;What company owns Corvette?&quot;, &quot;GM&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;!!&quot;) Quiz = [] Quiz.append({ &quot;Q_1&quot;: Question_1, &quot;Q_2&quot;: Question_2, &quot;Q_3&quot;: Question_3, &quot;Q_4&quot;: Question_4, &quot;Q_5&quot;: Question_5, &quot;Q_6&quot;: Question_6, &quot;Q_7&quot;: Question_7 }) #List Implementation def print_data(d_rec): print(&quot;Question 1:&quot;, d_rec[&quot;Q_1&quot;]) print(&quot;Question 2:&quot;, d_rec[&quot;Q_2&quot;]) print(&quot;Question 3:&quot;, d_rec[&quot;Q_3&quot;]) print(&quot;Question 4:&quot;, d_rec[&quot;Q_4&quot;]) print(&quot;Question 5:&quot;, d_rec[&quot;Q_5&quot;], end=&quot;&quot;) print() print(&quot;Here is a record of your quiz:&quot;) def for_loop(): print(&quot;For loop output n&quot;) for record in Quiz: print_data(record) for_loop() . Hello, akshat1228! You will be asked 7 questions on cars. Question: Whats the most expensive car in the world? Mercedes Benz 300 SLR - $142,000,000 is correct! Question: Which company owns Rolls Royce? BMW is correct! Question: What is the biggest electric car company? Tesla is correct! Question: What company owns Jaguar? TATA Motors is correct! Question: Whose the best F1 Racer? Max Verstappen is correct! Question: Who is the F1 G.O.A.T? Lewis Hamilton is correct! Question: What company owns Corvette? GM is correct! akshat1228 you scored 7/7!! Here is a record of your quiz: For loop output Question 1: Mercedes Benz 300 SLR - $142,000,000 Question 2: BMW Question 3: Tesla Question 4: TATA Motors Question 5: Max Verstappen .",
            "url": "https://akshat122805.github.io/fastpages/notebook/2022/11/28/Lesson1Portfolio.html",
            "relUrl": "/notebook/2022/11/28/Lesson1Portfolio.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Tools Check/Local Server/Test",
            "content": "Hello Mr. Mort . Local Server Running . . Terminal Output . . 4001 Port . I ran the curl command, tried different stuff and troubleshooted, it worked, but I have to change my address to 127.0.0.1:4001/fastpages . Kernels . . Python Kernel . . JavaScript Kernel . . testing . Bash/All . .",
            "url": "https://akshat122805.github.io/fastpages/2022/11/17/toolscheck.html",
            "relUrl": "/2022/11/17/toolscheck.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Title",
            "content": "print(&#39;Hello World!&#39;) . Hello World! . console.log(&quot;This is my use JavaScript Kernel&quot;) . This is my use JavaScript Kernel . echo TEST . TEST .",
            "url": "https://akshat122805.github.io/fastpages/2022/11/17/kernels.html",
            "relUrl": "/2022/11/17/kernels.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Binary Intro",
            "content": "Binary Math . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . EXPLODE BULB! | EXPLODE BULB! | EXPLODE BULB! | EXPLODE BULB! | EXPLODE BULB! | EXPLODE BULB! | EXPLODE BULB! | EXPLODE BULB! | . | | | | | | | | .",
            "url": "https://akshat122805.github.io/fastpages/2022/11/17/binary.html",
            "relUrl": "/2022/11/17/binary.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Night @ Museum",
            "content": "Fun Pictures . . I saw this really interesting drawing at drawing and painting class, I love this architecture. . . This is also really cool, great use of shape! . . This is cool! I love the colors in the photo. . . This is the our project being tested by a friend of ours! . . More cool cs projects, Eli’s group made a stock simulator API which was really cool! . . Martin’s project was really cool, his group made a sports application for fantasy football, and I liked it a lot because the API was very well built and I also really like fantasy football. . . These guys made a really cool translator for star wars, it was pretty cool! .",
            "url": "https://akshat122805.github.io/fastpages/markdown/2022/11/09/night.html",
            "relUrl": "/markdown/2022/11/09/night.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "CB Final Test Corrections",
            "content": "Final Score: Took about an hour to 1 hour 15 mins. . Overall . Overall I scored 45/50, I was aiming for this score because it satisfied a 5 on the AP scale. Moreover, Mr. Mortensen said how the students who did best and reflected on their work all got very nice internships, something that I am aiming for. . Test Corrections . Question 15 | . I chose C, because I thought users would provide documentation for program code. This is wrong however, because users are unlikely to have the expertise needed to understand and provide documentation for program code. . D is the correct answer, because users ca help for design and development. . Question 34 | . I chose D because I thought combining all three lists would make sense. This is incorrect. . B is the correct answer because the code segment intializes firstList to contain the first three, so the code segment then swaps the contents of firstList and secondList by assigning firstList to thirdList, and so on, and so on, like third to second. . Question 36 | . I chose B because I thought it was initialized to 0 instead of 1. The correct answer is C because it is initialized to 1m so it would be 13,15,17,19,21 . Question 44 | . I guessed on this and chose B, this is incorrect because for any integer, the value of MOD 2 is either 0 or 1. . The correct answer is C because 23/3 has a remainder of two, so 3 is the correct option. . Question 46 | . I chose D because I thought that when the third statements assigns the value of first, the fourth would assign the second making it also false. . This is incorrect , I simply chose false instead of true but the graphic show that is asks for the true variable and Option A is correct because it specifies the true variable for both first and second value. . Strengths and Weakness . I had a tough time with observational questions which were questions that involved loops and arrays and much more. Also some binary question were hard. . | I had a good time guessing and doing good on binary questions. I also understood and answered user interface questions correctly and communications affecting a project questions. . | . Test Explanations, why I chose what I chose . For Question 1, I chose D because the loop is repeating 3 times which makes sense for the code segment to be multiplied by three or cubed. | For Question 2, it was just an observational question, when x is negative, y is assigned the value true and value of y is displayed. | For Question 3, I figured software testing is always going to be needed even if there is good communication. | For Question 4, observing member list for food allergies and dietary restrictions. | For Question 5, Brandon’s list is not needed. | For Question 6, the value of count is displayed in the loop which is then split into 1s, so all odd integers are printed. | For Question 7, the code segment adds x and y and then divides x. | For Question 8, the difference between numList and newList is that the elements j and k are interchanged. | For Question 9, 3-7 reduces the score if it is not set to 0. | For Question 10, having no communication would probably screw up the entire project. | For Question 11, the algorithm uses myList for 2 loops, the outerloops uses the first element in the list which corresponds to the second to last question. | For Question 12, the information is provided by the restaurant, not the customer. | For Question 13, the list does not only have positive values, the loop returns when it hits a positive value and returns when it hits a negative value. | For Question 14, check minus is displayed for 8 and 6, both in between 7 at the top. | For Question 16, each packet contains data to be transmitted, so I figured that each packet would be reassembled by the recipients device itself. | Question 17, protocols follow a set of rules, D makes the most sense, | Question 18, C made the most sense to me, because it said the word network. | Question 19, 1111 is the max for four bits, which is equal to 15. 15+14=29, so its an overflow I guess. | Question 20, I figured four bits would be 2 to the 4th power, which is 16. | Question 21, 1 2 and 3 make all sense, binary is everything in Computer Science :) | Question 22, I figured this is binary mathematics, I’m going to be honest, I guessed on this one, | Question 23, analog data has values that change a lot. So the samples are represented digitally, so I chose D because it talks about sequence of bits. | Question 24, binary mathematics again | Question 25, age is a number, number makes sense. | Question 26, true or false option, boolean? | Question 27, string makes the best sense for a student name. | Question 28, units used is about 25 or less, the cost is times the number of units. I just used math for this. Question 29, lists are data, so list makes allowing to insert data. | Question 30, numeric data is also good for lists. | Question 31, I guessed h, but it make sense because index 3 has ghi, and the second letter of ghi is h. | Question 32, it says yourlist equals mylist, so 10,30,50,70 equals 10,30,50,70. | Question 33, it says greater than or equal to 90, and left to right. | Question 35, maxPS to 50 by default, if statements were confusing tho but I just chose A and D. | Question 37, the values keep interchanging, and num1 has to equal num2 and temp has to equal both. But it would make sense for the second statement to be in the middle. | Question 38, same reasoning as last question. | Question 39, hello would not make sense, also negative numbers would not make any sense for lists, it was between 2.5 or 4, but 2.5 had a decimal, so I chose 4. | Question 40, 3-5=-2 | Question 41, q is 20, p is q so p is 20, r is q so r is 20, r is p so r is once again 20. | Question 42, IF blocks make up 8+4+4=16 | Question 43, integer is based at 0 and exceeds 5 when the loop is eliminated, so 10 or 15 makes sense, I guessed 15, | Question 45, match the lists, the list contains 2 positive values, so count1 is count2 and count2 is 3. | Question 47, I did the math for each and then put them in order. | Question 48, both x and z have the value of 50 so I chose C. | Question 49, well on backwards is no so no+on = noon. | Question 50, first name goes first so I chose A, and last names goes second, which is why I chose A. | .",
            "url": "https://akshat122805.github.io/fastpages/collegeboard/2022/11/09/final.html",
            "relUrl": "/collegeboard/2022/11/09/final.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "RapidAPI -- City API for College List",
            "content": "import requests url = &quot;https://wft-geo-db.p.rapidapi.com/v1/geo/adminDivisions&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;9c66664f59msh6192ef0d1546d18p17967bjsne6b5e3ca1958&quot;, &quot;X-RapidAPI-Host&quot;: &quot;wft-geo-db.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . {&#34;data&#34;:[{&#34;id&#34;:3517016,&#34;wikiDataId&#34;:&#34;Q228&#34;,&#34;name&#34;:&#34;Andorra&#34;,&#34;country&#34;:&#34;Andorra&#34;,&#34;countryCode&#34;:&#34;AD&#34;,&#34;latitude&#34;:42.558333333,&#34;longitude&#34;:1.555277777,&#34;population&#34;:78151},{&#34;id&#34;:3515514,&#34;wikiDataId&#34;:&#34;Q4117373&#34;,&#34;name&#34;:&#34;Al Mamzar&#34;,&#34;country&#34;:&#34;United Arab Emirates&#34;,&#34;countryCode&#34;:&#34;AE&#34;,&#34;region&#34;:&#34;Dubai&#34;,&#34;regionCode&#34;:&#34;DU&#34;,&#34;latitude&#34;:25.309469444,&#34;longitude&#34;:55.342811111,&#34;population&#34;:0},{&#34;id&#34;:3517068,&#34;wikiDataId&#34;:&#34;Q878&#34;,&#34;name&#34;:&#34;United Arab Emirates&#34;,&#34;country&#34;:&#34;United Arab Emirates&#34;,&#34;countryCode&#34;:&#34;AE&#34;,&#34;latitude&#34;:23.75,&#34;longitude&#34;:54.5,&#34;population&#34;:9890400},{&#34;id&#34;:3386644,&#34;wikiDataId&#34;:&#34;Q3694483&#34;,&#34;name&#34;:&#34;Ab Band District&#34;,&#34;country&#34;:&#34;Afghanistan&#34;,&#34;countryCode&#34;:&#34;AF&#34;,&#34;region&#34;:&#34;Ghazni&#34;,&#34;regionCode&#34;:&#34;GHA&#34;,&#34;latitude&#34;:32.983,&#34;longitude&#34;:67.967,&#34;population&#34;:0},{&#34;id&#34;:3339608,&#34;wikiDataId&#34;:&#34;Q2572213&#34;,&#34;name&#34;:&#34;Ab Kamari&#34;,&#34;country&#34;:&#34;Afghanistan&#34;,&#34;countryCode&#34;:&#34;AF&#34;,&#34;region&#34;:&#34;Badghis&#34;,&#34;regionCode&#34;:&#34;BDG&#34;,&#34;latitude&#34;:34.925,&#34;longitude&#34;:62.901666666,&#34;population&#34;:0}],&#34;links&#34;:[{&#34;rel&#34;:&#34;first&#34;,&#34;href&#34;:&#34;/v1/geo/cities?offset=0&amp;limit=5&#34;},{&#34;rel&#34;:&#34;next&#34;,&#34;href&#34;:&#34;/v1/geo/cities?offset=5&amp;limit=5&#34;},{&#34;rel&#34;:&#34;last&#34;,&#34;href&#34;:&#34;/v1/geo/cities?offset=72150&amp;limit=5&#34;}],&#34;metadata&#34;:{&#34;currentOffset&#34;:0,&#34;totalCount&#34;:72155}} . response with json test . import requests url = &quot;https://wft-geo-db.p.rapidapi.com/v1/geo/adminDivisions&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;9c66664f59msh6192ef0d1546d18p17967bjsne6b5e3ca1958&quot;, &quot;X-RapidAPI-Host&quot;: &quot;wft-geo-db.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.json) . &lt;bound method Response.json of &lt;Response [200]&gt;&gt; . import requests import json cities = 0 while cities &lt; 3: # allows for multiple searches url = &quot;https://visual-crossing-weather.p.rapidapi.com/forecast&quot; item = input(&quot;Select a city:&quot;) # allows for search query = {&quot;aggregateHours&quot;:&quot;24&quot;,&quot;location&quot;:item,&quot;contentType&quot;:&quot;csv&quot;,&quot;unitGroup&quot;:&quot;us&quot;,&quot;shortColumnNames&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;6b9dacaef5mshade649601d1255fp14c8c2jsn9aeceb731b2b&quot;, &quot;X-RapidAPI-Host&quot;: &quot;visual-crossing-weather.p.rapidapi.com&quot; } response = requests.get(url, headers=headers, params=query) print(response.text) cities = (cities +1) .",
            "url": "https://akshat122805.github.io/fastpages/2022/10/10/rapidapi.html",
            "relUrl": "/2022/10/10/rapidapi.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "CB Proofs",
            "content": "CB Proofs . . Errors . errors are a part of coding, they are expected | Types of Errors: Logic Errors | Syntax Errors | Run-time Errors | Overflow Errors | . | Logic Errors - make mistake in algorithm, causing the program to behave differently | Syntax Errors - making a typo on the code, causing the program to not run (colon/semicolon, parenthesis, braces, indentation, quotes, var def) | Run-time Errors - works for a bit and then crashes, caused by a certain line of code in the sequence (called a bug) divide by 0 | improper user input | . | Overflow Errors - result in certain values that are too big to show or to calculate | . Notes . A program is developed from an idea and a specific purpose in mind. | Developers start investigating the problem/purpose and reflect. | Developers must: determine requirements of program | understand the constraints (ex: time) | understand user concerns/interests | . | Developers investigate using surveys, user testing, interviews, direct observations | Developers design program by brainstorming, storyboard, plan user experience, layout user interface, organize into modules, develop a testing strategy | Developers decide on the program requirements that describe how a program should behave, include a liste of user interactions | Developers create a prototype of program | Testing, testing, testing!! Very important at micro level and macro level | .",
            "url": "https://akshat122805.github.io/fastpages/week5/collegeboard/2022/10/10/cbproof.html",
            "relUrl": "/week5/collegeboard/2022/10/10/cbproof.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Burger, Fries, Drink, and more python challenge!",
            "content": "menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;salad&quot;: 4.99, &quot;toast&quot;: 2.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times while total &lt; 3: item = input(&quot;Please select 3 items from the menu&quot;) print(&quot;Item ordered:&quot;, item.lower()) for k,v in menu.items(): if item.lower() == k: print(&quot;Your total order is $&quot;, menu[item.lower()]) total = (total + 1) break if item.lower() != k: print(&quot;Try choosing your item again.&quot;) continue #code should add the price of the menu items selected by the user . Menu burger $3.99 fries $1.99 drink $0.99 salad $4.99 toast $2.99 Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: Try choosing your item again. Item ordered: drink] Try choosing your item again. Item ordered: water Try choosing your item again. Item ordered: toast Your total order is $ 2.99 Item ordered: salad Your total order is $ 4.99 Item ordered: burger Your total order is $ 3.99 . Loops and stuff . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . Alphabet stuff . Testing numbers . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . Multiples of 2 . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: # skips the number 0, so that the list is from 1 to 100 pass elif numbers[i] % 2 == 0: # elif makes the code not repeat numbers newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98] .",
            "url": "https://akshat122805.github.io/fastpages/2022/10/10/burgersfries.html",
            "relUrl": "/2022/10/10/burgersfries.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "AWS Proofs",
            "content": "AWS Proof . Curl . . Inside Docker . . Other Proofs . .",
            "url": "https://akshat122805.github.io/fastpages/week5/collegeboard/2022/10/05/awsproof.html",
            "relUrl": "/week5/collegeboard/2022/10/05/awsproof.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Ivy League Calculator - Product Roadmap",
            "content": "Project Purpose &amp; Objectives . Through this project, we would like to use student inputted data to calculate their chances of getting into every Ivy league college. | . What is the inputted data? . The program’s input will be the different factors that change a student’s chance of getting into an Ivy league. We will be focusing on the following factors: . | Intended major | GPA | SAT/ACT scores | Gender | Ethnicity | Extra Cirriculars | Clubs | Essay | Leadership | . How are we going to do this . The output of the program will be in the format of a percentage chance of getting accepted into each ivy league college. . Brown University | Columbia University | Cornell University | Dartmouth University | Harvard University | Princeton University | University of Pennsylvania | Yale University | . Project Concept (continued): . Furthermore, to get an accurate output, data from multiple sources will be used for each college, primarily acceptance rate data over the past 5 years for each college, based on the student data mentioned previously. . Frontend: Design Methodology . We need to make a aesthetic design, we are going to use bootstrap in synthesis with the normal HTML and CSS. . . Program Purpose: To assign the right college for each person and determine if they can get into an ivy league. | Data Abstraction: Task the right variables, organize colleges coherently. | Managing Complexity: Since we plan on using an API in our project, this means that we will be handling a lot of data, hence organization is required. We plan on doing this with lists and dictionaries to create and format our API in key-value pairs. This will be crucial to the function, organization, and efficiency of our project. | Procedural Abstraction: The search engine will be able to narrow down the results of the different colleges the user may get into. | Algorithm: We are going to create a function that takes user inputs and compares them to a list of data that we have from the API. | Testing: Single tests that we can perform on our project can include individually testing each function. That way we don’t code everything, mess up and struggle to find the error later. | . Backend Program . We are going to use Jupyter notebooks . We will use JS and Python. . That’s it for now, thanks! .",
            "url": "https://akshat122805.github.io/fastpages/week5/collegeboard/2022/10/02/collegeboardprogress.html",
            "relUrl": "/week5/collegeboard/2022/10/02/collegeboardprogress.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Collegeboard 1.1-1.3",
            "content": "Collegeboard 1.3 . Notes on 1.3 Daily Video 1 . A program is developed from an idea and a specific purpose in mind. | Developers start investigating the problem/purpose and reflect. | Developers must: determine requirements of program | understand the constraints (ex: time) | understand user concerns/interests | . | Developers investigate using surveys, user testing, interviews, direct observations | Developers design program by brainstorming, storyboard, plan user experience, layout user interface, organize into modules, develop a testing strategy | Developers decide on the program requirements that describe how a program should behave, include a liste of user interactions | Developers create a prototype of program | Testing, testing, testing!! Very important at micro level and macro level | . Notes on 1.3 Daily Video 2 . Programs are usually developed by teams of people. Individuals work on different functional components. Everyone msut receive credit for what they’ve done. | Use comments to give credit. Comments are very useful. | You can also use code segments written by others, but this needs to be credited. | . Notes on 1.3 Daily Video 3 . Program documentation describes the overall program, lists the program specifications, describes functions/procedures/methods | Documentation happens throughout the development of the program: at the beginning, during, and after | . Program Design and Development Quiz . I took the quiz and got 3/3! I have now completed all quizzes 1.1-1.3 For the Program Function and Purpose Quiz (MCQs), I made a couple simple mistakes on the questions, but I understand how to do them now. .",
            "url": "https://akshat122805.github.io/fastpages/week6/collegeboard/2022/09/28/collegeboard2.html",
            "relUrl": "/week6/collegeboard/2022/09/28/collegeboard2.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Scrum TEAM!",
            "content": ". The Goal: . Create an AI algorithm that takes into account the user’s current information and then determines the chance of them getting accepted into a good college. | . Roles . Scrum Master: David Vasilev | Frontend Developer: Samit Poojary | DevOP: Vardaan Sinha | Backend Developer: Akshat Parikh | . My Role . I am the backend developer of this team and my task is to ensure that the server side of our programs are efficiently working. I also have the job to make sure that our data storage is up to date and reflects the work we do as a group. | .",
            "url": "https://akshat122805.github.io/fastpages/personal/scrum%20team/markdown/2022/09/26/scrumteam.html",
            "relUrl": "/personal/scrum%20team/markdown/2022/09/26/scrumteam.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "HTML Fragments - JS Kernel",
            "content": "function logIt(output) { console.log(output); } logIt(&quot;Welcome to the best stock pics in the NATION!&quot;); . Welcome to the best stock pics in the NATION! . // define a function to hold data for a Person function Person(name, nationality, age) { this.name = name; this.nationality = nationality; this.age = age; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // defines the manager var manager = new Person(&quot;Qualcomm&quot;, &quot;QCOM&quot;, &quot;$120.40&quot;); manager.setRole(&quot;Manager&quot;); // JSON conversion from object to a string Person.prototype.toJSON = function() { const obj = {name: this.name, nationality: this.nationality, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // player data var players = [ new Person(&quot;TSLA&quot;, &quot;Telsa&quot;, &quot;$277.20&quot;), new Person(&quot;AAPL&quot;, &quot;Apple&quot;, &quot;$150.6&quot; ), new Person(&quot;AMZN&quot;, &quot;Amazon&quot;, &quot;$115.20&quot;), new Person(&quot;LCID&quot;, &quot;Lucid&quot;, &quot;$14.50&quot;), new Person(&quot;RIVN&quot;, &quot;Rivian&quot;, &quot;$33.85&quot;), ]; var FUT = new Squad(manager, players); Squad.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Ticker&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Company&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Price&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of lakers team for (var row of FUT.squad) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.nationality + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(FUT._toHtml()); . TickerCompanyPrice . Qualcomm | QCOM | $120.40 | TSLA | Telsa | $277.20 | AAPL | Apple | $150.6 | AMZN | Amazon | $115.20 | LCID | Lucid | $14.50 | RIVN | Rivian | $33.85 | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Our group created this table format, from there we added things we were interested in! . &lt;/div&gt; . .",
            "url": "https://akshat122805.github.io/fastpages/python/jupyter/markdown/javascript/2022/09/25/usingJS.html",
            "relUrl": "/python/jupyter/markdown/javascript/2022/09/25/usingJS.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Stock Generator and Information",
            "content": "Testing Program’s Functionality . This js-encoded algorithm randomly selects a stock ticker, from a click of a button! | . Click for the stock of the week! STOCK . &lt;/script&gt; . Hope you get rich now! .",
            "url": "https://akshat122805.github.io/fastpages/java/markdown/2022/09/25/randomstock.html",
            "relUrl": "/java/markdown/2022/09/25/randomstock.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Psychology and the Good Life Lecture Notes",
            "content": "Psychology and the Good Life Notes . Introduction . Yale students and other ivy leaguers have a ton of stress | To make them less stressed, the experiment followed by including the students to engage in happier activities. | . Insights . Healthy practices matter a lot | Become wealthy, make a lot of money, it matters a lot | Make time for gratitude | Helping others, helps a lot | Make time to make more social connections | With effort, anything can change! | . Conclusion . Stress is a huge issue, to cope with it, we must work together and embrace the happy aspects of life. | . Gratitude List . Here are some things that I am grateful for: . Family | Money | Friends | . Gratitude List . Family | Education | Freedom | Access to technology to live an easy lifestyle | My Mental Health Goals . Grind harder, make more money | Sleep at least 8 hrs per night on average | Eat Good and Healthy | Workout and get BUFF. | Personal Goals I want to achive in my life . All A’s in highschool | Get 33-35 on ACT | MAKE MONEY!!!! | Get better at football, on Varsity. | Stress Form . Stress Form for high schoolers. Below are statistics for the results of each question. | . .",
            "url": "https://akshat122805.github.io/fastpages/markdown/2022/09/19/videonotes2.html",
            "relUrl": "/markdown/2022/09/19/videonotes2.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Collaboration Notes 1.1",
            "content": "Collaboration 1.1 Notes - CollegeBoard . Social Media is a great example for collaboration, this is because its digital functionality allows others to communicate. Facebook and Instagram are examples of collaboration. | . Pros of Collaborating . Collaboration leads to certain skills, it can help you with conflict resolution with toxic members. It can help you negotiate important deals. It can help you solve problems in a verbal fight. Collaborating also helps you in teamwork, where you are constantly communicating and dealing with problems. . | Working together allows things to go far and achieve more things. . | . Ways to Collaborate . In class, you can make changes for each other. | You can make changes in github, by viewing each others repo. | You can comment on each others issues, on the review ticket. | . .",
            "url": "https://akshat122805.github.io/fastpages/markdown/2022/09/19/videonotes1.html",
            "relUrl": "/markdown/2022/09/19/videonotes1.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Docker Group Server",
            "content": "Python Web Server . FastPages Web Server . .",
            "url": "https://akshat122805.github.io/fastpages/markdown/2022/09/19/dockerblog.html",
            "relUrl": "/markdown/2022/09/19/dockerblog.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "App Lab Notes/Key Points",
            "content": "Key Notes . Link to the Quiz Game Akshat’s Sports Quiz Akshat’s Sports Quiz . Program Purpose: The purpose of the quiz game is to learn more about sports. There are five questions and then there is a survey at the end. The best thing to do is have fun and take the best guess to do best. . Functionality: The quiz is built around three simple MC questions that have an input and output, if you get it right, you have a correct screen as an output, if you get it wrong, you have an incorrect screen as an output. The FRQ is also like that, and has one or two responses as correct answers which leads to two different outputs. . FRQ Design . . Successes . Quiz functions properly | Inputs and outputs are well connected | Quiz is visually appealing | Quiz achieves the goal to educate about sports | . Discoveries . Some things we discovered: . Code.org can be utilized to create a way more advanced and interactive program | onEvent and setScreen primary ran this program. | . Challenges . Brainstorming the layout of the quiz | . App#2 - Car App . I created a car app that gives information on all sorts of cars, I plan to add more cars in the future. It’s pretty cool! . Akshat’s Blue Book . . Design . Successes . Way easier to code | . Discoveries . I like using Code.org :) | .",
            "url": "https://akshat122805.github.io/fastpages/markdown/2022/09/11/applabnotes.html",
            "relUrl": "/markdown/2022/09/11/applabnotes.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "App Lab Plans",
            "content": "AppLab Ideas . Planning: Design . For this task, we had to create a quiz of our interest, we had to choose how many questions as well. I decided to plan my quiz as a sports quiz, in which each question would specifically ask about an individual sport and a prominent player/team for the sport. My other team members also decided to make a quiz for the sport they play. A vital step to creating this quiz was to utilize the “onDemand” code, along with, “setscreen”, these commands were important for switching screens for every button that is clicked. . For my quiz specifically, I decided to include multiple choice questions as well as one free response question and a choice question which consists of a dropdown menu. After that, I started off with an NFL question, an NBA question, a NHL question, as well as questions about Cricket and Tennis. . I had a fun time thinking about how I was going to design my quiz, and eventually after I decided what to do, I got to coding and tried to add unique elements to my quiz that would make it way more different. . . Daily Group Plans . For daily plans, we decided to create a group chat and message each other of what we were planning to add to our quiz. . By doing this, we also got ideas on how to visually make our quiz look better as well as what else I could possibly add to my quiz. . Planning Steps . Steps before coding: . Deciding what the quiz should be about | How the quiz will work | How the quiz will start/end | How the quiz will look | .",
            "url": "https://akshat122805.github.io/fastpages/markdown/2022/09/11/applabidea.html",
            "relUrl": "/markdown/2022/09/11/applabidea.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Akshat's HTML Fragments",
            "content": "Minima to Hacker . So basically what I did was change the theme of my fastpages from minima to hacker. But this resulted in my HTML crashing and my website completely crashing!!! | Everything basically became alligned to the left, which shows how much of a component CSS is. | Dropdown menu is no longer functioning | . Search Feature . . Using the search function, I can find all my notes for CSP and any other class as well. | . Tagging . . As you can see, there are assorted tags for each category for my fastpages. | .",
            "url": "https://akshat122805.github.io/fastpages/markdown/2022/09/05/htmlfrags.html",
            "relUrl": "/markdown/2022/09/05/htmlfrags.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Trimester 1 Markdown Table",
            "content": "Trimester 1 Weeks 3,4,5 Table . S.NO This Week Next Week Week 2 . AP Stats | AP Stats 1.5 | AP Stats 1.6 | AP Stats 1.7 | . AP Calc AB | A12 Limit Worksheet | Study for Test 1 | Test 1 | . AP Computer Science Principles | Comp Sci Assignment #3 - Data Extraction | Assignment #4 | Continue Working on enhancing next assignment | . AP Environmental Science | Biome Worksheet | Complete Portfolio | Study for Quiz | . Football | Practice for Tuesday, Wednesday, Thursday | Team Dinner on Thursday | Friday Night Lights | . Extracirriculars | FTC on Saturday | Real Internship Work | Helping Hands Club Volunteering | .",
            "url": "https://akshat122805.github.io/fastpages/markdown/2022/09/04/table.html",
            "relUrl": "/markdown/2022/09/04/table.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Python List 09/02/2022",
            "content": "# variable of type string name = &quot;Akshat Parikh&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Akshat Parikh &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 100.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Akshat Parikh&#39;, &#39;age&#39;: 16, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Akshat Parikh &lt;class &#39;str&#39;&gt; . Cars = [] # Append to List a Dictionary of key/values related to a person and cars Cars.append({ &quot;Car&quot;: &quot;Rolls Royce&quot;, &quot;Model&quot;: &quot;Wraith&quot;, &quot;Year&quot;: &quot;2016&quot;, &quot;Engine&quot;: &quot;V12&quot;, }) Cars.append({ &quot;Car&quot;: &quot;Mercedes Benz Maybach&quot;, &quot;Model&quot;: &quot;S580&quot;, &quot;Year&quot;: &quot;2020&quot;, &quot;Engine&quot;: &quot;V10&quot;, }) Cars.append({ &quot;Car&quot;: &quot;Mercedes G-Wagon&quot;, &quot;Model&quot;: &quot;G-Wagon&quot;, &quot;Year&quot;: &quot;2021&quot;, &quot;Engine&quot;: &quot;V10&quot;, }) Cars.append({ &quot;Car&quot;: &quot;Jeep&quot;, &quot;Model&quot;: &quot;Gladiator Rubicon&quot;, &quot;Year&quot;: &quot;2020&quot;, &quot;Engine&quot;: &quot;V6&quot;, }) Cars.append({ &quot;Car&quot;: &quot;Cadillac&quot;, &quot;Model&quot;: &quot;Escalade 600 Black&quot;, &quot;Year&quot;: &quot;2023&quot;, &quot;Engine&quot;: &quot;V8&quot;, }) Cars.append({ &quot;Car&quot;: &quot;Rivian&quot;, &quot;Model&quot;: &quot;R1S&quot;, &quot;Year&quot;: &quot;2023&quot;, &quot;Engine&quot;: &quot;Electric&quot;, }) Cars.append({ &quot;Car&quot;: &quot;Land Rover&quot;, &quot;Model&quot;: &quot;Range Rover&quot;, &quot;Year&quot;: &quot;2021&quot;, &quot;Engine&quot;: &quot;V8&quot;, }) # Print the data structure print(Cars) . [{&#39;Car&#39;: &#39;Rolls Royce&#39;, &#39;Model&#39;: &#39;Wraith&#39;, &#39;Year&#39;: &#39;2016&#39;, &#39;Engine&#39;: &#39;V12&#39;}, {&#39;Car&#39;: &#39;Mercedes Benz Maybach&#39;, &#39;Model&#39;: &#39;S580&#39;, &#39;Year&#39;: &#39;2020&#39;, &#39;Engine&#39;: &#39;V10&#39;}, {&#39;Car&#39;: &#39;Mercedes G-Wagon&#39;, &#39;Model&#39;: &#39;G-Wagon&#39;, &#39;Year&#39;: &#39;2021&#39;, &#39;Engine&#39;: &#39;V10&#39;}, {&#39;Car&#39;: &#39;Jeep&#39;, &#39;Model&#39;: &#39;Gladiator Rubicon&#39;, &#39;Year&#39;: &#39;2020&#39;, &#39;Engine&#39;: &#39;V6&#39;}, {&#39;Car&#39;: &#39;Cadillac&#39;, &#39;Model&#39;: &#39;Escalade 600 Black&#39;, &#39;Year&#39;: &#39;2023&#39;, &#39;Engine&#39;: &#39;V8&#39;}, {&#39;Car&#39;: &#39;Rivian&#39;, &#39;Model&#39;: &#39;R1S&#39;, &#39;Year&#39;: &#39;2023&#39;, &#39;Engine&#39;: &#39;Electric&#39;}, {&#39;Car&#39;: &#39;Land Rover&#39;, &#39;Model&#39;: &#39;Range Rover&#39;, &#39;Year&#39;: &#39;2021&#39;, &#39;Engine&#39;: &#39;V8&#39;}] . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Akshat&quot;, &quot;LastName&quot;: &quot;Parikh&quot;, &quot;DOB&quot;: &quot;December 28&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;akshat1228@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Rolls Royce Culinan, Mercedes Maybach, Mercedes G-Wagon, Ashton Martin Vantage&quot;] }) # Partner # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;David&quot;, &quot;LastName&quot;: &quot;Vasilev&quot;, &quot;DOB&quot;: &quot;May 27&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;davidv42185@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;McLaren 720s, Ferrari 488&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Akshat&#39;, &#39;LastName&#39;: &#39;Parikh&#39;, &#39;DOB&#39;: &#39;December 28&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Rolls Royce Culinan, Mercedes Maybach, Mercedes G-Wagon, Ashton Martin Vantage&#39;]}, {&#39;FirstName&#39;: &#39;David&#39;, &#39;LastName&#39;: &#39;Vasilev&#39;, &#39;DOB&#39;: &#39;May 27&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;davidv42185@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;McLaren 720s, Ferrari 488&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Akshat Parikh Residence: San Diego Birth Day: December 28 Cars: Rolls Royce Culinan, Mercedes Maybach, Mercedes G-Wagon, Ashton Martin Vantage David Vasilev Residence: San Diego Birth Day: May 27 Cars: McLaren 720s, Ferrari 488 . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Akshat Parikh Residence: San Diego Birth Day: December 28 Cars: Rolls Royce Culinan, Mercedes Maybach, Mercedes G-Wagon, Ashton Martin Vantage David Vasilev Residence: San Diego Birth Day: May 27 Cars: McLaren 720s, Ferrari 488 . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Akshat Parikh Residence: San Diego Birth Day: December 28 Cars: Rolls Royce Culinan, Mercedes Maybach, Mercedes G-Wagon, Ashton Martin Vantage David Vasilev Residence: San Diego Birth Day: May 27 Cars: McLaren 720s, Ferrari 488 . Python Cars Quiz . import getpass, sys questions = 7 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &#39;!&#39;) print(&quot; t&quot;, &quot;You will be asked &quot; + str(questions) + &quot; questions on cars.&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) rsp = input() if rsp == answer : print(&quot; t&quot;, rsp + &quot; is correct!&quot;) global correct correct += 1 else: print (&quot; t&quot;, rsp + &quot; is incorrect!&quot;) return rsp Question_1 = question_and_answer(&quot;Whats the most expensive car in the world?&quot;, &quot;Mercedes Benz 300 SLR - $142,000,000&quot;) Question_2 = question_and_answer(&quot;Which company owns Rolls Royce?&quot;, &quot;BMW&quot;) Question_3 = question_and_answer(&quot;What is the biggest electric car company?&quot;, &quot;Tesla&quot;) Question_4 = question_and_answer(&quot;What company owns Jaguar?&quot;, &quot;TATA Motors&quot;) Question_5 = question_and_answer(&quot;Whose the best F1 Racer?&quot;, &quot;Max Verstappen&quot;) Question_6 = question_and_answer(&quot;Who is the F1 G.O.A.T?&quot;, &quot;Lewis Hamilton&quot;) Question_7 = question_and_answer(&quot;What company owns Corvette?&quot;, &quot;GM&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;!!&quot;) Quiz = [] Quiz.append({ &quot;Q_1&quot;: Question_1, &quot;Q_2&quot;: Question_2, &quot;Q_3&quot;: Question_3, &quot;Q_4&quot;: Question_4, &quot;Q_5&quot;: Question_5, &quot;Q_6&quot;: Question_6, &quot;Q_7&quot;: Question_7 }) #List Implementation def print_data(d_rec): print(&quot;Question 1:&quot;, d_rec[&quot;Q_1&quot;]) print(&quot;Question 2:&quot;, d_rec[&quot;Q_2&quot;]) print(&quot;Question 3:&quot;, d_rec[&quot;Q_3&quot;]) print(&quot;Question 4:&quot;, d_rec[&quot;Q_4&quot;]) print(&quot;Question 5:&quot;, d_rec[&quot;Q_5&quot;], end=&quot;&quot;) print() print(&quot;Here is a record of your quiz:&quot;) def for_loop(): print(&quot;For loop output n&quot;) for record in Quiz: print_data(record) for_loop() . Hello, akshat1228! You will be asked 7 questions on cars. Question: Whats the most expensive car in the world? Mercedes Benz 300 SLR - $142,000,000 is correct! Question: Which company owns Rolls Royce? BMW is correct! Question: What is the biggest electric car company? Tesla is correct! Question: What company owns Jaguar? TATA Motors is correct! Question: Whose the best F1 Racer? Max Verstappen is correct! Question: Who is the F1 G.O.A.T? Lewis Hamilton is correct! Question: What company owns Corvette? GM is correct! akshat1228 you scored 7/7!! Here is a record of your quiz: For loop output Question 1: Mercedes Benz 300 SLR - $142,000,000 Question 2: BMW Question 3: Tesla Question 4: TATA Motors Question 5: Max Verstappen .",
            "url": "https://akshat122805.github.io/fastpages/2022/09/02/pythonlist.html",
            "relUrl": "/2022/09/02/pythonlist.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Bash Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/akshat1228/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/akshat1228/.local/share/jupyter/kernels/bash javascript /home/akshat1228/.local/share/jupyter/kernels/javascript python3 /home/akshat1228/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/akshat1228/.local/share/jupyter/kernels/python3 .",
            "url": "https://akshat122805.github.io/fastpages/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Ethereum Blog Post",
            "content": "Insights: . Ethereum has recently been dipping a lot, and on September 15th, Ethereum 2 is coming out, which will change Ethereum into a proof of stake system. This is pretty cool and can increase Ethereum’s price potentially. . A few reasons why proof of stake for Ethereum is important: . Faster transactions | Reduces amount of energy used | More secure for validators | . I am looking forward to the upcoming Ethereum 2 release, lets see what happens to Ethereum’s price as well, I will update on this topic soon, see you all soon! . .",
            "url": "https://akshat122805.github.io/fastpages/markdown/misc/2022/08/28/ethereum.html",
            "relUrl": "/markdown/misc/2022/08/28/ethereum.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Python Quiz",
            "content": "import getpass, sys questions = 5 correct = 0 def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) if answer == msg: print(&quot;Correct Answer&quot;) global correct correct+=1 else: print (&quot;Incorrect Answer&quot;) question_and_answer(&quot;What team is based in Seattle?&quot;, &quot;Seahawks&quot;) question_and_answer(&quot;What team is based in Pittsburgh&quot;, &quot;Steelers&quot;) question_and_answer(&quot;Who is the QB for the Green Bay Packers?&quot;, &quot;Aaron Rodgers&quot;) question_and_answer(&quot;What team won the 2022 Superbowl?&quot;, &quot;L.A Rams&quot;) question_and_answer(&quot;Who is the G.O.A.T?&quot;, &quot;Mitch Trubisky&quot;) print(correct, &quot;Answers correct&quot;) . Question: What team is based in Seattle? Answer: Seahawks Correct Answer Question: What team is based in Pittsburgh Answer: Steelers Correct Answer Question: Who is the QB for the Green Bay Packers? Answer: Aaron Rodgers Correct Answer Question: What team won the 2022 Superbowl? Answer: L.A Rams Correct Answer Question: Who is the G.O.A.T? Answer: Mitch Trubisky Correct Answer 5 Answers correct .",
            "url": "https://akshat122805.github.io/fastpages/jupyter/2022/08/27/pythonquiz.html",
            "relUrl": "/jupyter/2022/08/27/pythonquiz.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Environmental Science Portfolio",
            "content": "STUDY THIS: . https://quizlet.com/535655479/biogeochemical-cycles-flash-cards/ . 1.4 Carbon Cycles Part 1: . Ecosystems are result of biotic and abiotic interactions . The carbon cycle is the movement of atoms and molecules containing the element carbon between sources and sinks . Some cycles barely take any time, others take millions! . It is one of the biogeochemical cycle, that means it is self-regulating and naturally occurring movement of chemical molecules through various sources and sinks (reservoirs) . Biogeochemical cycles stabilize and regulate the flow of matter through ecosystems . Biogeochemical cycles can be disrupted by human activity . Carbon Cycle: . In the atmosphere, carbon is found as CO2, we need to move it in the ecosystem, so we use photosynthesis. Photosynthesis transformed the CO2 into glucose, the opposite of photosynthesis is cellular respiration. . The process of decomposition can return CO2 to the atmosphere. Plants, organisms, etc die. During decomposition, CO2 can go down into the soil or deeper into the ocean. . Limestone is the bedrock for many terrestrial ecosystems. . Carbon that gets stored. Gets stored into producers and consumers. . Fossil carbons, fossilized remains of plants and animals, can be in terrestrial aquatic environments. It is a geologic long term deposit of carbon. The process of extraction and combustion results in CO2 being added into the atmosphere, which would disrupt the carbon cycle. . Reservoir Interactions: . Fast carbon cycling: . Fast carbon cycling is largely the movement of carbon compounds through the biosphere (the living organisms on Earth) . | This type of cycling is driven by the cellular metabolism of producers in ecosystems . | . The main biological processes involved in fast carbon cycling are photosynthesis and cellular respiration . | . For fast carbon cycling, the primary carbon reservoir is the atmosphere . | . The length of time a carbon compound spends in the atmosphere is relatively brief . | . Decomposition into more detail: . Return CO2 to the atmosphere through cellular respiration . | Return carbon to the soil or water through breakdown of sugars in the bodies they are decomposing . | . Sedimentation and burial: Organic material can result in a much longer sequestration of carbon compounds. Once the carbon is buried, it is essentially removed from the fast carbon cycle. . Deep ocean sediments and fossil carbon (coal, oil, natural gas) are the largest reservoirs of carbon…and these are the result of sedimentation and burial. . Long term carbon reservoirs can return to cycling via fossil fuel extraction and combustion . And uplift and weathering of limestone. . Carbon is released to the atmosphere when fossil fuels are burned (combustion). Carbon is released into the atmosphere during respiration. . . Photosynthesis removes carbon from the atmosphere . | Sedimentation and burial . | The process of burning combustion results in carbon being released into the atmosphere . | Decomposition returns CO2 back to the atmosphere in the carbon cycle . | . The Nitrogen Cycle: . . Nitrogen Fixation - through the process of lightning or bacteria since N2 cannot be used by several organisms. So N2 is converted into another type of Nitrogen. . Nitrification - Nitrification is a process that converts ammonia and similar nitrogen compounds into nitrite (NO2–) and then nitrate (NO3–). Nitrification can occur in water systems that contain chloramines. The problem is greatest when temperatures are warm and water usage is low. . Source: NH3 . Sink: NO2/NO3 . Ammonification - Ammonification. When an organism excretes waste or dies, the nitrogen in its tissues is in the form of organic nitrogen (e.g. amino acids, DNA). Various fungi and prokaryotes then decompose the tissue and release inorganic nitrogen back into the ecosystem as ammonia in the process known as ammonification. . Assimilation - Assimilation. Assimilation is the process by which plants and animals incorporate the NO3- and ammonia formed through nitrogen fixation and nitrification. Plants take up these forms of nitrogen through their roots, and incorporate them into plant proteins and nucleic acids. . Denitrification - Denitrification. Denitrification is the process that converts nitrate to nitrogen gas, thus removing bioavailable nitrogen and returning it to the atmosphere. Dinitrogen gas (N2) is the ultimate end product of denitrification, but other intermediate gaseous forms of nitrogen exist . The Phosphorus Cycle: . The phosphorus cycle is the movement of atoms and molecules containing the element phosphorus between sources and sinks . The phosphorus cycle can be disrupted by human activity . ______ . It is a SLOW cycle, driven mainly by geologic processes. . Phosphorus has NO atmospheric and gas stage . Phosphorus is considered a LIMITING factor in ecosystems (nitrogen is also a limiting factor) . Producers need phosphorus to grow making them vitally important in ecosystems . | Fertilizer contains phosphorus . | . . STEPS: . Start from rocks | Sediments and rocks are a major reservoir for phosphorus | . Uplift and weathering leads to phosphorus dissolving in soil . That soil phosphorus can be dissolved into lakes or streams, OR terrestrial food webs . The runoff will take the soil phosphorus that went into terrestrial food webs, from terrestrial food webs to marine food webs. . If it is runoff into the ocean, it eventually becomes sedimented in the bottom of the ocean through Lithification. . Assimilation is the process from terrestrial food webs to take up phosphorus . What is the process that movies phosphorus from rocks into soil? Uplifting and Weathering . What is the process that movies phosphorus from soil into plants? Uplifting and Weathering . . Sediments . | Uplifting and sedimentary . | The dissolved phosphorus would make its way into the marine food webs through runoff. The phosphorus would also go through sedimentation in the ocean. . | The Hydrologic Cycle . Movement of water, one of four cycles, can be disrupted. . Hydrologic cycle is driven by the SUN . Oceans are the primary reservoir for water . Ice caps and ground water reserved are smaller reservoirs (fresh water) . . STEPS: . Begins with sun, driver of the entire cycle. Why? Because it drives evaporation, it drives water up into the atmosphere. . Sublimation (Solid to gaseous without passing through liquid state) . Once the water is in the atmosphere (a reservoir), it has to come down again, so the next step is precipitation (rain, fog, drip, dew, etc.) . Once its back into terrestrial ecosystems, it collects through ice, snow, and glaciers. It also connects to lakes, wetlands, etc. . Surface runoff and snowmelt runoff help retrieve water into rivers and freshwater lakes. . Anytime precipitation falls in an area that cannot absorb it, this causes a runoff, which leads to the water into another body of water. . The water that is able to penetrate into terrestrial ecosystems enters back through infiltration and seepage. . Once it infiltrates, it can go to several locations like groundwater storage. . Eventually the groundwater ends up back in the oceans, and evaporation is repeated again thus continuing the cycle. . . Precipitation . | A higher temperature would result in more evaporation of the Earth’s water. This would also result in a larger amount of precipitation. Under certain circumstances this could also produce more severe weather events such as storms, and hurricanes. . | Runoff is more likely to increase since the precipitation is more likely to land on buildings with impervious surfaces instead of grounds that could absorb water. This can reduce groundwater recharge and cause droughts to become more severe. (Interesting) . | Ecosystem Mr. Hendricks Notes: .",
            "url": "https://akshat122805.github.io/fastpages/2022/08/26/ENVIRONMENTAL-SCIENCE-PORTFOLIO.html",
            "relUrl": "/2022/08/26/ENVIRONMENTAL-SCIENCE-PORTFOLIO.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Why American Football is the best sport",
            "content": "Explanation: . Hi! My name is Akshat, I play football and I think it is the best sport! A few reasons why: . It’s aggressive and there is a lot of action | Some players are really good | The games are very entertaining! | . I am looking forward to the upcoming NFL season, BEARDOWN! (I’m a Chicago bears fan) . Chicago Bears Preseason Highlight .",
            "url": "https://akshat122805.github.io/fastpages/markdown/misc/2022/08/21/post.html",
            "relUrl": "/markdown/misc/2022/08/21/post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Akshat's Top 6 Video Games",
            "content": "Top 6 Video Games: . In my honest opinion, here are my top six video games that I have played: . Call of Duty: Modern Warfare 3 | GTA V | Rocket League | Super Smash Bros | NBA 2k16 | Madden NFL 2020 |",
            "url": "https://akshat122805.github.io/fastpages/markdown/misc/2022/08/20/new.html",
            "relUrl": "/markdown/misc/2022/08/20/new.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "First Jupyter Notebook/Python",
            "content": "Printing &quot;Using python, so Hello World!&quot; with Python . Hello World! .",
            "url": "https://akshat122805.github.io/fastpages/2022/08/20/akshatp.html",
            "relUrl": "/2022/08/20/akshatp.html",
            "date": " • Aug 20, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "This website is powered by fastpages [^1]. . Hobbies . I like football | I like basketball | I enjoy trading stocks | I like writing and blogging | I like filming videos | . Goals for CSP This Year: . Hi! My name is Akshat, I have several goals for CSP this year! . I want to learn python and understand the fundamentals of it | I want to understand how python is used and why it is so vital in the computing world | I also want to understand the projects I will be doing, and having fun at the same time! | . I am very excited for this class, and I look forward to working on it!! .",
          "url": "https://akshat122805.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "CSP Notes",
          "content": "How to start coding . PS C: Users Aksha&gt; wsl (base) akshat1228@LAPTOP-V4AGJ4SP:/mnt/c/Users/Aksha$ cd (base) akshat1228@LAPTOP-V4AGJ4SP:~$ ls anaconda3 apcsp vscode wsl (base) akshat1228@LAPTOP-V4AGJ4SP:~$ cd vscode (base) akshat1228@LAPTOP-V4AGJ4SP:~/vscode$ ls APCSP vscode (base) akshat1228@LAPTOP-V4AGJ4SP:~/vscode$ cd vscode (base) akshat1228@LAPTOP-V4AGJ4SP:~/vscode/vscode$ code . . Creating a Notebook using Bash . You can do this by simply entering vscode through wsl. Here are some python commands: | . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Key Terms Continued (Trimester Cumulative) . Collaboration: One of the keys when working with a team on code. It is the art of communication that is essential to making functional code. . | Flask: Web Application Framework that is important to develop web applications. . | Jinja2: The Web Template Language that is compatible with Flask and Python. . | Bootstrap: An HTML/CSS template engine that helps to create more aesthetically appealing sites. . | Pseudo Code: This is essentially another term used to describe the comments that are made to describe each line or functionality of code. . | JavaScript: Another programming language that is essential, especially for frontend developers. . | Procedural Abstraction: The practice of promoting reuse instead of continuously coding the same thing again and again. . | Agile Methodology: The use of pair programming, test-driven development, stand-ups, planning sessions, and sprints. This also includes well defined team roles. . | AWS: Amazon Web Services is a tool that allows for the deployment of our projects. It is a large part of the backend of our project. . | Nginx: An open source software used for web serving, reverse proxy, caching, load balancing, media streaming, etc. . | Certbot: This is another open source software tool that allows for encrypted certifications for hosted sites. . | DNS: DNS, or Domain Name Services, allows for the assignment of a friendly name to a web server. . | API: Application Programming Interface, it is a way for multiple programs to communicate/call each other. . | API URL: The endpoint to which the API is directed. . | API Headers: The dictionary data structure used to send special messaging to the endpoint. . | Document Object Model: The Document Object Model, or DOM, is the interaction between HTML and JavaScript. . | HTTP/HTTPS: HTTP, or Hyper Text Transfer Protocol, is in charge of the communication between a web server and web browser. HTTPS, on the other hand, is in charge for more secure communication between a web server and a web browser. . | TCP/IP: Transmission Control Protocol, Internet Protocol. These messages are divided into small packets and sent between computers on the Internet. . | Network Layer: The wireless and physical layers that move bits across the Internet. . |",
          "url": "https://akshat122805.github.io/fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Bell Schedule",
          "content": "Bell Schedule . Monday . [Period](-) Start Time End Time . Period 1 | 8:35 AM | 9:44 AM | . Period 2 | 9:49 AM | 10:58 AM | . Break | 10:58 AM | 11:08 AM | . Period 3 | 11:13 AM | 12:22 AM | . Lunch | 12:22 PM | 12:52 PM | . Period 4 | 12:57 PM | 2:06 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:36 PM | 3:45 PM | . Tuesday . [Period](-) Start Time End Time . Period 1 | 8:35 AM | 9:44 AM | . Period 2 | 9:49 AM | 10:58 AM | . Break | 10:58 AM | 11:08 AM | . Period 3 | 11:13 AM | 12:22 AM | . Lunch | 12:22 PM | 12:52 PM | . Period 4 | 12:57 PM | 2:06 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:36 PM | 3:45 PM | . Wednesday (Late Start): . [Period](-) Start Time End Time . Period 1 | 9:55 AM | 10:53 AM | . Period 2 | 10:58 AM | 11:56 AM | . Break | 11:56 AM | 12:06 PM | . Period 3 | 12:11 PM | 1:09 PM | . Lunch | 1:09 PM | 1:39 PM | . Period 4 | 1:44 PM | 2:42 PM | . Period 5 | 2:47 PM | 3:45 PM | . Thursday . [Period](-) Start Time End Time . Period 1 | 8:35 AM | 9:44 AM | . Period 2 | 9:49 AM | 10:58 AM | . Break | 10:58 AM | 11:08 AM | . Period 3 | 11:13 AM | 12:22 AM | . Lunch | 12:22 PM | 12:52 PM | . Period 4 | 12:57 PM | 2:06 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:36 PM | 3:45 PM | . Friday: . [Period](-) Start Time End Time . Period 1 | 8:35 AM | 9:49 AM | . Period 2 | 9:54 AM | 11:08 AM | . Break | 11:08 AM | 11:18 AM | . Period 3 | 11:23 AM | 12:37 PM | . Lunch | 12:37 PM | 1:07 PM | . Period 4 | 1:12 PM | 2:26 PM | . Period 5 | 2:31 PM | 3:45 PM | .",
          "url": "https://akshat122805.github.io/fastpages/_pages/04_bellschedule.html",
          "relUrl": "/_pages/04_bellschedule.html",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "HTML Fragments + JS Kernel Table!",
          "content": "| HTML + JavaScript Table | Stock Generator | First API | .",
          "url": "https://akshat122805.github.io/fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://akshat122805.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}